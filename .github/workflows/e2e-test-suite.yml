name: E2E Test Suite

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          npm run test:e2e -- --reporter=json
        env:
          BASE_URL: ${{ vars.BASE_URL }}
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Generate coverage report (optional)
        if: always()
        run: |
          npm run coverage:report || true
        continue-on-error: true

      - name: Post story verification results
        if: always()
        env:
          SERVICE_TOKEN: ${{ secrets.SERVICE_TOKEN_STAGING || secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STORY_VERIFY_API: ${{ vars.STORY_VERIFY_API || vars.SUPABASE_URL }}
          BUILD_ID: ${{ github.run_id }}-${{ github.run_number }}
          DEPLOY_ENV: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          # Skip if no service token configured
          if [ -z "$SERVICE_TOKEN" ]; then
            echo "⚠️ SERVICE_TOKEN not configured, skipping story verification"
            exit 0
          fi

          node tools/post-playwright-results.mjs \
            --report artifacts/playwright-report.json \
            --coverage coverage/coverage-summary.json \
            --env $DEPLOY_ENV \
            --build $BUILD_ID

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            artifacts/
            playwright-report/
            test-results/
          retention-days: 7

      - name: Check release gate status
        if: success()
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # This would require psql or a node script to check v_sd_release_gate
          echo "Checking release gate status..."
          node -e "
            const { createClient } = require('@supabase/supabase-js');
            const supabase = createClient(
              process.env.SUPABASE_URL,
              process.env.SUPABASE_SERVICE_ROLE_KEY
            );
            (async () => {
              const { data, error } = await supabase
                .from('v_sd_release_gate')
                .select('*')
                .eq('ready', true);
              if (data?.length > 0) {
                console.log('✅ Release gates READY:', data.map(d => d.sd_key));
              } else {
                console.log('⚠️ No SDs ready for release yet');
              }
            })();
          " || true
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  notify:
    needs: e2e
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify status
        run: |
          if [ "${{ needs.e2e.result }}" == "success" ]; then
            echo "✅ E2E tests passed and stories verified"
          else
            echo "❌ E2E tests or story verification failed"
          fi