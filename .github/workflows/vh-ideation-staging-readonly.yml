name: EHG Ideation - Staging Read-Only

on:
  schedule:
    - cron: '10 4 * * *'   # daily @ 04:10 UTC
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: vh-ideation-staging-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    name: Venture Ideation Checks (Staging)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ vars.ENABLE_VH_CHECKS == '1' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install psql
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Prepare env & out dir
        run: |
          mkdir -p ops/checks/out
          echo "PGHOST=${{ secrets.PGHOST_STAGING }}" >> $GITHUB_ENV
          echo "PGPORT=${{ secrets.PGPORT_STAGING }}" >> $GITHUB_ENV
          echo "PGDATABASE=${{ secrets.PGDATABASE_STAGING }}" >> $GITHUB_ENV
          echo "PGUSER=${{ secrets.PGUSER_STAGING }}" >> $GITHUB_ENV
          echo "PGPASSWORD=${{ secrets.PGPASSWORD_STAGING }}" >> $GITHUB_ENV
          echo "PGSSLMODE=require" >> $GITHUB_ENV

      - name: Export ideation reports (read-only)
        env: { PGPASSWORD: ${{ secrets.PGPASSWORD_STAGING }} }
        run: psql -v ON_ERROR_STOP=1 -f ops/checks/vh_ideation_integrity_staging.sql

      - name: Summarize counts
        run: |
          count() { [ -f "$1" ] && echo $(( $(wc -l < "$1") - 1 )) || echo 0; }
          STAGES=$(count ops/checks/out/vh_stage_catalog_check.csv) # 1 row summary
          MISSING_SD=$(count ops/checks/out/vh_stage_coverage_gaps.csv)
          MISSING_PRD=$MISSING_SD  # same file includes both; UI will show both fields
          NOT_READY=$(count ops/checks/out/vh_stage_readiness.csv)
          VENTURE_NO_GOV=$(count ops/checks/out/vh_ventures_without_governance.csv)
          RECO=$(count ops/checks/out/vh_ideation_recommendations.csv)

          {
            echo "### EHG Ideation — Staging Overview"
            echo "- Stage catalog summary rows: ${STAGES}"
            echo "- Stage coverage gaps (rows with missing SD/PRD): ${MISSING_SD}"
            echo "- Stages not ready (gate not met): ${NOT_READY}"
            echo "- Ventures without any SD/PRD governance linkage: ${VENTURE_NO_GOV}"
            echo "- Recommendation rows (SD/PRD suggestions): ${RECO}"
          } >> $GITHUB_STEP_SUMMARY

      - name: Show top recommendations (read-only)
        run: |
          python - <<'PY'
          import csv, os, sys
          path = 'ops/checks/out/vh_ideation_recommendations.csv'
          rows = []
          if os.path.exists(path):
            with open(path, newline='', encoding='utf-8') as f:
              rows = list(csv.DictReader(f))
          # Sort by urgency (high, medium, low), then by venture_name, stage
          order = {'high':0, 'medium':1, 'low':2}
          rows.sort(key=lambda r: (order.get((r.get('urgency') or 'low').lower(), 9),
                                   (r.get('venture_name') or r.get('venture_id',''))[:128],
                                   r.get('stage','')))
          top = rows[:10]
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'a', encoding='utf-8') as out:
            out.write("\n### Top recommendations (by urgency)\n")
            if not top:
              out.write("_None_\n")
            else:
              for r in top:
                name = r.get('venture_name') or (r.get('venture_id','')[:8])
                line = f"- **{name}** — {r.get('stage','?')} — {r.get('rec_type','?')} — {r.get('urgency','?')}: {r.get('suggested_title','')}\n"
                out.write(line)
          PY

      - name: Push metrics to database
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          # Install Node.js dependencies if needed
          if [ ! -d "node_modules" ]; then
            npm install @supabase/supabase-js dotenv
          fi

          # Count gaps from reports
          count() { [ -f "$1" ] && echo $(( $(wc -l < "$1") - 1 )) || echo 0; }

          STAGE_GAPS=$(count ops/checks/out/vh_stage_coverage_gaps.csv)
          NOT_READY=$(count ops/checks/out/vh_stage_readiness.csv)
          VENTURE_NO_GOV=$(count ops/checks/out/vh_ventures_without_governance.csv)
          RECO=$(count ops/checks/out/vh_ideation_recommendations.csv)

          # Extract top 5 recommendations as JSON
          python - <<'EXTRACT_RECO' > /tmp/top_recommendations.json
          import csv, json, os
          path = 'ops/checks/out/vh_ideation_recommendations.csv'
          recs = []
          if os.path.exists(path):
            with open(path, newline='', encoding='utf-8') as f:
              for i, row in enumerate(csv.DictReader(f)):
                if i >= 5: break
                recs.append({
                  'title': row.get('suggested_title', ''),
                  'urgency': row.get('urgency', 'medium'),
                  'type': row.get('rec_type', 'SD'),
                  'venture': row.get('venture_name', 'Unknown')
                })
          print(json.dumps(recs))
          EXTRACT_RECO

          TOP_RECS=$(cat /tmp/top_recommendations.json)

          # Push to database
          node scripts/push-integrity-metrics.js \
            --source "vh-ideation" \
            --workflow-run "${{ github.run_id }}" \
            --stage-gaps "${STAGE_GAPS}" \
            --not-ready "${NOT_READY}" \
            --ventures-no-gov "${VENTURE_NO_GOV}" \
            --recommendation-count "${RECO}" \
            --recommendations "${TOP_RECS}" \
          || echo "Warning: Could not push metrics to database"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vh-ideation-staging-${{ github.run_id }}
          path: ops/checks/out/*.csv
          retention-days: 30