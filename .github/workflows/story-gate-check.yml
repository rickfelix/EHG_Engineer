name: Story Release Gate Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_call:
    inputs:
      sd_key:
        description: 'Strategic Directive to check'
        type: string
        required: false
    outputs:
      gate_ready:
        description: 'Whether the SD passed release gate'
        value: ${{ jobs.check-gate.outputs.ready }}
      passing_pct:
        description: 'Percentage of stories passing'
        value: ${{ jobs.check-gate.outputs.passing_pct }}

jobs:
  check-gate:
    name: Check Story Release Gate
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.gate.outputs.ready }}
      passing_pct: ${{ steps.gate.outputs.passing_pct }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --only=production

      - name: Extract SD Key from PR
        id: extract
        if: github.event_name == 'pull_request'
        run: |
          # Try to extract SD key from branch name or PR title
          BRANCH="${{ github.head_ref }}"
          PR_TITLE="${{ github.event.pull_request.title }}"

          # Pattern: feat/SD-2025-09-EMB or SD-2025-09-EMB
          SD_KEY=$(echo "$BRANCH" | grep -oE 'SD-[0-9]{4}-[0-9]{2}-[A-Z]+' || true)

          if [ -z "$SD_KEY" ]; then
            SD_KEY=$(echo "$PR_TITLE" | grep -oE 'SD-[0-9]{4}-[0-9]{2}-[A-Z]+' || true)
          fi

          # Override with input if provided
          if [ -n "${{ inputs.sd_key }}" ]; then
            SD_KEY="${{ inputs.sd_key }}"
          fi

          echo "sd_key=$SD_KEY" >> $GITHUB_OUTPUT

          if [ -z "$SD_KEY" ]; then
            echo "‚ö†Ô∏è No SD key found in branch or PR title"
            echo "Skipping gate check"
          else
            echo "üìã Checking gate for: $SD_KEY"
          fi

      - name: Check Release Gate
        id: gate
        if: steps.extract.outputs.sd_key != ''
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SD_KEY: ${{ steps.extract.outputs.sd_key }}
        run: |
          node -e "
          const { createClient } = require('@supabase/supabase-js');

          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
          );

          (async () => {
            const sdKey = process.env.SD_KEY;

            // Check if feature is enabled
            const featureEnabled = process.env.FEATURE_STORY_GATES === 'true';

            if (!featureEnabled) {
              console.log('üì¥ Story gates feature is disabled');
              console.log('Set FEATURE_STORY_GATES=true to enable');
              // Don't block if feature is off
              console.log('ready=true');
              console.log('passing_pct=N/A');
              process.exit(0);
            }

            // Query release gate view
            const { data, error } = await supabase
              .from('v_sd_release_gate')
              .select('*')
              .eq('sd_key', sdKey)
              .single();

            if (error) {
              if (error.code === 'PGRST116') {
                console.log('‚ÑπÔ∏è No stories found for ' + sdKey);
                // No stories = not blocking
                console.log('ready=true');
                console.log('passing_pct=100');
                process.exit(0);
              }
              console.error('‚ùå Error checking gate:', error.message);
              process.exit(1);
            }

            if (!data) {
              console.log('‚ÑπÔ∏è SD ' + sdKey + ' has no stories');
              console.log('ready=true');
              console.log('passing_pct=100');
              process.exit(0);
            }

            // Output results for GitHub Actions
            console.log('ready=' + data.ready);
            console.log('passing_pct=' + (data.passing_pct || 0));

            // Display summary
            console.log('');
            console.log('üìä Story Verification Status');
            console.log('=============================');
            console.log('SD: ' + data.sd_key);
            console.log('Total Stories: ' + data.total_stories);
            console.log('Passing: ' + data.passing_count + ' (' + (data.passing_pct || 0) + '%)');
            console.log('Failing: ' + data.failing_count);
            console.log('Not Run: ' + data.not_run_count);
            console.log('Coverage Target: ' + data.coverage_target + '%');
            console.log('Ready for Release: ' + (data.ready ? '‚úÖ YES' : '‚ùå NO'));

            if (!data.ready) {
              console.log('');
              console.log('‚ö†Ô∏è Release gate BLOCKED');
              console.log('Not all stories are passing verification.');
              console.log('Run E2E tests to update story status.');

              // Exit with failure if gate is blocked
              process.exit(1);
            }
          })();
          " | tee gate-output.txt

          # Parse output for GitHub Actions
          READY=$(grep "^ready=" gate-output.txt | cut -d'=' -f2)
          PASSING_PCT=$(grep "^passing_pct=" gate-output.txt | cut -d'=' -f2)

          echo "ready=$READY" >> $GITHUB_OUTPUT
          echo "passing_pct=$PASSING_PCT" >> $GITHUB_OUTPUT

      - name: Add PR Comment
        if: github.event_name == 'pull_request' && steps.extract.outputs.sd_key != ''
        uses: actions/github-script@v7
        with:
          script: |
            const sdKey = '${{ steps.extract.outputs.sd_key }}';
            const ready = '${{ steps.gate.outputs.ready }}' === 'true';
            const passingPct = '${{ steps.gate.outputs.passing_pct }}';

            const status = ready ? '‚úÖ **PASSED**' : '‚ùå **BLOCKED**';
            const emoji = ready ? 'üéâ' : '‚ö†Ô∏è';

            const comment = `## ${emoji} Story Release Gate: ${status}

            **Strategic Directive**: ${sdKey}
            **Story Coverage**: ${passingPct}%
            **Gate Status**: ${ready ? 'Ready for release' : 'Not all stories passing'}

            ${!ready ? `
            ### Required Actions:
            1. Run E2E tests with story annotations
            2. Fix any failing tests
            3. Re-run this check

            View details: \`npm run check:story-gates -- --sd ${sdKey}\`
            ` : `
            ### ‚úÖ All story verifications passing!
            This SD meets the release criteria.
            `}

            ---
            <sub>Story gate checks can be disabled by setting FEATURE_STORY_GATES=false</sub>`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes('Story Release Gate')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Set Check Status
        if: steps.extract.outputs.sd_key != ''
        uses: actions/github-script@v7
        with:
          script: |
            const ready = '${{ steps.gate.outputs.ready }}' === 'true';
            const passingPct = '${{ steps.gate.outputs.passing_pct }}';
            const sdKey = '${{ steps.extract.outputs.sd_key }}';

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Story Release Gate',
              head_sha: context.sha,
              status: 'completed',
              conclusion: ready ? 'success' : 'failure',
              output: {
                title: ready ? '‚úÖ Gate Passed' : '‚ùå Gate Blocked',
                summary: `SD ${sdKey}: ${passingPct}% stories passing`,
                text: ready
                  ? 'All story verifications are passing. Ready for release!'
                  : 'Not all stories are passing. Run E2E tests to update verification status.'
              }
            });

      - name: Skip if no SD
        if: steps.extract.outputs.sd_key == ''
        run: |
          echo "‚ÑπÔ∏è No SD key found - skipping gate check"
          echo "To enable gate checks, include SD key in branch name or PR title"
          echo "Example: feat/SD-2025-09-EMB-story-implementation"