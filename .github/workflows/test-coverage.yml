name: Test Coverage Enforcement

on:
  pull_request:
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'server.js'
  push:
    branches: [main, develop]

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check dependency policy
        run: |
          echo "üîç Checking dependency policy..."
          node scripts/check-deps.js
        continue-on-error: true

      - name: System deps (jq, bc)
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Run tests with coverage
        env:
          NODE_OPTIONS: --experimental-vm-modules
        run: |
          npm run test:coverage || {
            echo "‚ö†Ô∏è Test coverage encountered errors"
            echo "This is informational - workflow will continue"
            echo "Known issues: Jest environment teardown, missing exports, ESM conflicts"
            exit 0
          }
        continue-on-error: true  # Informational only during test infrastructure fixes

      - name: Check coverage threshold
        run: |
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "‚ö†Ô∏è Coverage report not generated (tests may have failed)"
            echo "This is informational - workflow will continue"
            exit 0
          fi

          THRESHOLD=$(cat config/coverage.json | jq '.threshold' 2>/dev/null || echo "80")
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.statements.pct' 2>/dev/null || echo "0")
          HAS_GRACE="${{ contains(github.event.pull_request.labels.*.name, 'coverage-grace') }}"

          if [ "$HAS_GRACE" = "true" ]; then
            echo "‚ö†Ô∏è WARNING: Coverage grace period used (max 2 PRs allowed)"
            echo "‚ö†Ô∏è Current: ${COVERAGE}%, Required: ${THRESHOLD}%"
            echo "‚ö†Ô∏è Remove 'coverage-grace' label once coverage improves"
          elif (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "‚ö†Ô∏è Coverage ${COVERAGE}% below threshold ${THRESHOLD}%"
            echo "üí° Add 'coverage-grace' label for temporary bypass (2 uses max)"
            echo "‚ÑπÔ∏è This is informational during test infrastructure improvements"
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
          fi
        continue-on-error: true  # Informational only during test infrastructure fixes