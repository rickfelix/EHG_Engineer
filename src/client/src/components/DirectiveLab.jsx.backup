/**
 * DirectiveLab Component - SDIP Implementation
 * Compact two-section layout: Recent Submissions + Step Wizard
 * Multi-submission management with grouping capabilities
 * EXEC Phase Implementation
 */

import React, { useState, useEffect } from 'react';
import { 
  ChevronDown, 
  ChevronRight, 
  Check, 
  Lock, 
  AlertCircle,
  Camera,
  MessageSquare,
  Target,
  Layers,
  FileText,
  CheckCircle,
  ArrowRight,
  Plus,
  Copy,
  RefreshCw,
  Edit2
} from 'lucide-react';
import RecentSubmissions from './RecentSubmissions';
import GroupCreationModal from './GroupCreationModal';
import ProgressIndicator from './ProgressIndicator';

const DirectiveLab = ({ isCompact = false }) => {
  const [activeStep, setActiveStep] = useState(1);
  const [submission, setSubmission] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedSubmissions, setSelectedSubmissions] = useState([]);
  const [showGroupModal, setShowGroupModal] = useState(false);
  const [refreshSubmissions, setRefreshSubmissions] = useState(0);
  const [isMobile, setIsMobile] = useState(false);
  const [activePanel, setActivePanel] = useState('submissions'); // 'submissions' | 'wizard'

  useEffect(() => {
    const checkMobile = () => {
      const mobile = window.innerWidth < 640; // Use Tailwind sm: breakpoint
      setIsMobile(mobile);
      if (mobile && submission) {
        setActivePanel('wizard'); // Auto-switch to wizard when submission selected on mobile
      }
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, [submission]);
  
  // Form data for each step
  const [formData, setFormData] = useState({
    chairmanInput: '',
    screenshotUrl: '',
    intentSummary: '',
    stratTacOverride: null,
    synthesisReviewed: false,
    questionAnswers: {},
    summaryConfirmed: false
  });

  // Validation gate states
  const [gateStatus, setGateStatus] = useState({
    1: false, // Input provided
    2: false, // Intent confirmed
    3: false, // Classification reviewed
    4: false, // Synthesis reviewed
    5: false, // Questions answered
    6: false  // Summary confirmed
  });

  const steps = [
    {
      id: 1,
      title: 'Input & Screenshot',
      icon: <Camera className="w-5 h-5" />,
      description: 'Provide feedback and optional screenshot'
    },
    {
      id: 2,
      title: 'Intent Confirmation',
      icon: <Target className="w-5 h-5" />,
      description: 'Review and confirm the extracted intent'
    },
    {
      id: 3,
      title: 'Strategic/Tactical Classification',
      icon: <Layers className="w-5 h-5" />,
      description: 'Review strategic vs tactical breakdown'
    },
    {
      id: 4,
      title: 'Synthesis Review',
      icon: <FileText className="w-5 h-5" />,
      description: 'Review aligned, required, and recommended items'
    },
    {
      id: 5,
      title: 'Clarifying Questions',
      icon: <MessageSquare className="w-5 h-5" />,
      description: 'Answer questions to refine the directive'
    },
    {
      id: 6,
      title: 'Summary Confirmation',
      icon: <CheckCircle className="w-5 h-5" />,
      description: 'Review and confirm the final summary'
    }
  ];

  // Check if user can proceed to a step
  const canAccessStep = (stepId) => {
    if (stepId === 1) return true;
    // Must complete all previous gates
    for (let i = 1; i < stepId; i++) {
      if (!gateStatus[i]) return false;
    }
    return true;
  };

  // Handle step click
  const handleStepClick = (stepId) => {
    if (canAccessStep(stepId)) {
      setActiveStep(stepId);
    }
  };

  // Submit initial feedback
  const submitFeedback = async () => {
    if (!formData.chairmanInput.trim()) {
      setError('Feedback is required');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/sdip/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          feedback: formData.chairmanInput,
          screenshot_url: formData.screenshotUrl
        })
      });

      if (!response.ok) throw new Error('Failed to submit feedback');

      const data = await response.json();
      setSubmission(data);
      setFormData({
        ...formData,
        intentSummary: data.intent_summary
      });
      setGateStatus({ ...gateStatus, 1: true });
      setActiveStep(2);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Complete a step
  const completeStep = async (stepId) => {
    if (!submission) return;

    setLoading(true);
    setError(null);

    const stepData = {};
    switch (stepId) {
      case 2:
        stepData.intent_summary = formData.intentSummary;
        break;
      case 3:
        if (formData.stratTacOverride) {
          stepData.override = formData.stratTacOverride;
        }
        break;
      case 4:
        stepData.reviewed = true;
        break;
      case 5:
        stepData.answers = formData.questionAnswers;
        break;
      case 6:
        stepData.confirmed = true;
        break;
    }

    try {
      const response = await fetch(`/api/sdip/submissions/${submission.submission_id}/step/${stepId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          submission_id: submission.submission_id,
          data: stepData
        })
      });

      if (!response.ok) throw new Error('Failed to complete step');

      const data = await response.json();
      setGateStatus({ ...gateStatus, [stepId]: true });
      
      // Auto-advance to next step if not the last
      if (stepId < 6) {
        setActiveStep(stepId + 1);
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Create Strategic Directive
  const createStrategicDirective = async () => {
    if (!submission || !gateStatus[6]) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/sdip/strategic-directive', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          submission_id: submission.submission_id
        })
      });

      if (!response.ok) throw new Error('Failed to create Strategic Directive');

      const data = await response.json();
      // Redirect to new SD
      window.location.href = data.redirect_url;
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Render step content
  const renderStepContent = (stepId) => {
    switch (stepId) {
      case 1:
        return (
          <div className={isCompact ? 'space-y-3 sm:space-y-4' : 'space-y-4 sm:space-y-5'}>
            <div>
              <label className={`block font-medium mb-2 ${isCompact ? 'text-xs sm:text-sm' : 'text-sm'}`}>
                Chairman Feedback <span className="text-red-500">*</span>
              </label>
              <textarea
                className={`w-full border rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${
                  isCompact ? 'p-2 sm:p-3 text-sm' : 'p-3 text-sm'
                }`}
                rows={isCompact ? "4" : "6"}
                placeholder="Enter your feedback about the EHG application..."
                value={formData.chairmanInput}
                onChange={(e) => setFormData({ ...formData, chairmanInput: e.target.value })}
              />
            </div>
            <div>
              <label className={`block font-medium mb-2 ${isCompact ? 'text-xs sm:text-sm' : 'text-sm'}`}>
                Screenshot URL (Optional)
              </label>
              <input
                type="url"
                className={`w-full border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${
                  isCompact ? 'p-2 sm:p-3 text-sm' : 'p-3 text-sm'
                }`}
                placeholder="https://example.com/screenshot.png"
                value={formData.screenshotUrl}
                onChange={(e) => setFormData({ ...formData, screenshotUrl: e.target.value })}
              />
            </div>
            <button
              onClick={submitFeedback}
              disabled={loading || !formData.chairmanInput.trim()}
              className={`bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors ${
                isCompact ? 'px-4 py-1.5 text-sm' : 'px-6 py-2 text-sm sm:text-base'
              }`}
            >
              {loading ? 'Analyzing...' : 'Submit & Analyze'}
            </button>
          </div>
        );

      case 2:
        return (
          <div className={isCompact ? 'space-y-3 sm:space-y-4' : 'space-y-4 sm:space-y-5'}>
            <div>
              <label className={`block font-medium mb-2 ${isCompact ? 'text-xs sm:text-sm' : 'text-sm'}`}>
                Extracted Intent Summary
              </label>
              <textarea
                className={`w-full border rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${
                  isCompact ? 'p-2 sm:p-3 text-sm' : 'p-3 text-sm'
                }`}
                rows={isCompact ? "3" : "4"}
                value={formData.intentSummary}
                onChange={(e) => setFormData({ ...formData, intentSummary: e.target.value })}
              />
              <p className={`text-gray-500 mt-1 ${isCompact ? 'text-xs' : 'text-sm'}`}>
                Review and edit if needed to accurately capture your intent
              </p>
            </div>
            <button
              onClick={() => completeStep(2)}
              disabled={loading}
              className={`bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors ${
                isCompact ? 'px-4 py-1.5 text-sm' : 'px-6 py-2 text-sm sm:text-base'
              }`}
            >
              {loading ? 'Confirming...' : 'Confirm Intent'}
            </button>
          </div>
        );

      case 3:
        return (
          <div className={isCompact ? 'space-y-3 sm:space-y-4' : 'space-y-4 sm:space-y-5'}>
            {submission?.strat_tac && (
              <div className={`bg-gray-50 dark:bg-gray-800 rounded-lg ${
                isCompact ? 'p-3 sm:p-4' : 'p-4'
              }`}>
                <div className={`flex justify-between mb-${isCompact ? '3 sm:mb-4' : '4'}`}>
                  <div className="text-center">
                    <div className={`font-bold text-blue-600 ${
                      isCompact ? 'text-lg sm:text-xl' : 'text-2xl'
                    }`}>
                      {submission.strat_tac.strategic_pct}%
                    </div>
                    <div className={`text-gray-600 dark:text-gray-400 ${
                      isCompact ? 'text-xs sm:text-sm' : 'text-sm'
                    }`}>Strategic</div>
                  </div>
                  <div className="text-center">
                    <div className={`font-bold text-green-600 ${
                      isCompact ? 'text-lg sm:text-xl' : 'text-2xl'
                    }`}>
                      {submission.strat_tac.tactical_pct}%
                    </div>
                    <div className={`text-gray-600 dark:text-gray-400 ${
                      isCompact ? 'text-xs sm:text-sm' : 'text-sm'
                    }`}>Tactical</div>
                  </div>
                </div>
                <div className={`text-gray-700 dark:text-gray-300 ${
                  isCompact ? 'text-xs sm:text-sm' : 'text-sm'
                }`}>
                  <p className="font-medium mb-1">Classification Rationale:</p>
                  <p>{submission.strat_tac.rationale}</p>
                </div>
              </div>
            )}
            <button
              onClick={() => completeStep(3)}
              disabled={loading}
              className={`bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors ${
                isCompact ? 'px-4 py-1.5 text-sm' : 'px-6 py-2 text-sm sm:text-base'
              }`}
            >
              {loading ? 'Confirming...' : 'Accept Classification'}
            </button>
          </div>
        );

      case 4:
        return (
          <div className="space-y-4">
            {submission?.synthesis && (
              <div className={isCompact ? 'space-y-3 sm:space-y-4' : 'space-y-4 sm:space-y-5'}>
                {['aligned', 'required', 'recommended'].map(category => (
                  submission.synthesis[category]?.length > 0 && (
                    <div key={category} className={`border border-gray-200 dark:border-gray-700 rounded-lg ${
                      isCompact ? 'p-3 sm:p-4' : 'p-4'
                    }`}>
                      <h4 className={`font-medium capitalize mb-2 ${isCompact ? 'text-sm' : 'text-sm sm:text-base'}`}>{category} Items</h4>
                      <ul className={`space-y-${isCompact ? '1.5 sm:space-y-2' : '2'}`}>
                        {submission.synthesis[category].map((item, idx) => (
                          <li key={idx} className="flex items-start">
                            <span className={`mr-2 ${isCompact ? 'text-sm' : 'text-sm'}`}>•</span>
                            <div className="flex-1">
                              <span className={`${isCompact ? 'text-sm' : 'text-sm'}`}>{item.text}</span>
                              {item.badges && (
                                <div className={`flex gap-1 mt-1 flex-wrap`}>
                                  {item.badges.map((badge, bidx) => (
                                    <span
                                      key={bidx}
                                      className={`bg-gray-200 dark:bg-gray-600 dark:text-gray-300 rounded ${
                                        isCompact ? 'px-1.5 py-0.5 text-xs' : 'px-2 py-1 text-xs'
                                      }`}
                                    >
                                      {badge}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )
                ))}
              </div>
            )}
            <button
              onClick={() => completeStep(4)}
              disabled={loading}
              className={`bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors ${
                isCompact ? 'px-4 py-1.5 text-sm' : 'px-6 py-2 text-sm sm:text-base'
              }`}
            >
              {loading ? 'Confirming...' : 'Approve Synthesis'}
            </button>
          </div>
        );

      case 5:
        return (
          <div className={isCompact ? 'space-y-3 sm:space-y-4' : 'space-y-4 sm:space-y-5'}>
            {submission?.clarifying_questions?.map((question, idx) => (
              <div key={idx} className={`space-y-${isCompact ? '1.5 sm:space-y-2' : '2'}`}>
                <label className={`block font-medium ${isCompact ? 'text-xs sm:text-sm' : 'text-sm'}`}>
                  {question}
                </label>
                <textarea
                  className={`w-full border rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${
                    isCompact ? 'p-2 sm:p-3 text-sm' : 'p-3 text-sm'
                  }`}
                  rows={isCompact ? "2" : "3"}
                  placeholder="Your answer..."
                  value={formData.questionAnswers[idx] || ''}
                  onChange={(e) => setFormData({
                    ...formData,
                    questionAnswers: {
                      ...formData.questionAnswers,
                      [idx]: e.target.value
                    }
                  })}
                />
              </div>
            ))}
            <button
              onClick={() => completeStep(5)}
              disabled={loading}
              className={`bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors ${
                isCompact ? 'px-4 py-1.5 text-sm' : 'px-6 py-2 text-sm sm:text-base'
              }`}
            >
              {loading ? 'Submitting...' : 'Submit Answers'}
            </button>
          </div>
        );

      case 6:
        const SummaryStep = () => {
          const [summaryText, setSummaryText] = useState(submission?.client_summary || '');
          const [isEditing, setIsEditing] = useState(false);
          const [isRegenerating, setIsRegenerating] = useState(false);
          const [copySuccess, setCopySuccess] = useState(false);

          const handleCopySummary = async () => {
            try {
              await navigator.clipboard.writeText(summaryText);
              setCopySuccess(true);
              setTimeout(() => setCopySuccess(false), 2000);
            } catch (err) {
              console.error('Failed to copy:', err);
            }
          };

          const handleRegenerateSummary = async () => {
            if (!submission) return;
            setIsRegenerating(true);
            
            try {
              const response = await fetch(`/api/sdip/submissions/${submission.id}/regenerate-summary`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
              });
              
              if (!response.ok) throw new Error('Failed to regenerate summary');
              
              const data = await response.json();
              setSummaryText(data.client_summary);
            } catch (err) {
              setError(err.message);
            } finally {
              setIsRegenerating(false);
            }
          };

          return (
            <div className={`space-y-${isCompact ? '2 sm:space-y-3' : '3'}`}>
              <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded">
                <div className={`flex items-center justify-between border-b border-blue-200 dark:border-blue-700 ${
                  isCompact ? 'p-2 sm:p-3' : 'p-3'
                }`}>
                  <h4 className={`font-medium text-blue-900 dark:text-blue-100 ${
                    isCompact ? 'text-xs sm:text-sm' : 'text-sm'
                  }`}>Client Summary</h4>
                  <div className={`flex items-center ${isCompact ? 'gap-0.5 sm:gap-1' : 'gap-1'}`}>
                    <button
                      onClick={handleCopySummary}
                      className={`text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-800 rounded transition-colors ${
                        isCompact ? 'p-0.5 sm:p-1' : 'p-1'
                      }`}
                      title="Copy to clipboard"
                    >
                      {copySuccess ? (
                        <Check className={isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'} />
                      ) : (
                        <Copy className={isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'} />
                      )}
                    </button>
                    <button
                      onClick={handleRegenerateSummary}
                      disabled={isRegenerating}
                      className={`text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-800 rounded transition-colors disabled:opacity-50 ${
                        isCompact ? 'p-0.5 sm:p-1' : 'p-1'
                      }`}
                      title="Regenerate summary"
                    >
                      <RefreshCw className={`${isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'} ${isRegenerating ? 'animate-spin' : ''}`} />
                    </button>
                    <button
                      onClick={() => setIsEditing(!isEditing)}
                      className={`rounded transition-colors ${
                        isCompact ? 'p-0.5 sm:p-1' : 'p-1'
                      } ${
                        isEditing 
                          ? 'bg-blue-100 text-blue-700 dark:bg-blue-800 dark:text-blue-300'
                          : 'text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-800'
                      }`}
                      title="Edit summary"
                    >
                      <Edit2 className={isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'} />
                    </button>
                  </div>
                </div>
                
                <div className={isCompact ? 'p-2 sm:p-3' : 'p-3'}>
                  {isEditing ? (
                    <textarea
                      value={summaryText}
                      onChange={(e) => setSummaryText(e.target.value)}
                      className={`w-full border border-blue-300 rounded resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-white ${
                        isCompact ? 'p-1.5 text-xs sm:p-2 sm:text-sm' : 'p-2 text-sm'
                      }`}
                      rows={isCompact ? "3" : "4"}
                      placeholder="Edit the client summary..."
                    />
                  ) : (
                    <div className={`text-gray-700 dark:text-gray-300 whitespace-pre-wrap ${
                      isCompact ? 'text-xs sm:text-sm' : 'text-sm'
                    }`}>
                      {summaryText || 'Summary will be generated after questions are answered'}
                    </div>
                  )}
                </div>
              </div>
              
              <div className={`flex items-center flex-wrap ${isCompact ? 'gap-1.5 sm:gap-2' : 'gap-2'}`}>
                <button
                  onClick={() => {
                    if (isEditing) {
                      setIsEditing(false);
                    }
                    completeStep(6);
                  }}
                  disabled={loading || (gateStatus[6] && !isEditing)}
                  className={`bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50 transition-colors ${
                    isCompact ? 'px-2.5 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm' : 'px-3 py-1.5 text-sm'
                  }`}
                >
                  {loading ? 'Confirming...' : isEditing ? 'Save & Confirm' : 'Confirm Summary'}
                </button>
                
                {gateStatus[6] && (
                  <button
                    onClick={createStrategicDirective}
                    disabled={loading}
                    className={`bg-purple-600 text-white rounded hover:bg-purple-700 disabled:opacity-50 flex items-center transition-colors ${
                      isCompact ? 'px-2.5 py-1 text-xs gap-1 sm:px-3 sm:py-1.5 sm:text-sm' : 'px-3 py-1.5 text-sm gap-1'
                    }`}
                  >
                    {loading ? 'Creating...' : isCompact ? 'Create SD' : 'Create Strategic Directive'}
                    <ArrowRight className={isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'} />
                  </button>
                )}
                
                {copySuccess && (
                  <div className={`flex items-center bg-green-100 text-green-700 rounded ${
                    isCompact ? 'gap-0.5 px-1.5 py-0.5 text-xs' : 'gap-1 px-2 py-1 text-xs'
                  }`}>
                    <Check className={isCompact ? 'w-2.5 h-2.5' : 'w-3 h-3'} />
                    Copied!
                  </div>
                )}
              </div>
            </div>
          );
        };

        return <SummaryStep />;

      default:
        return null;
    }
  };

  const handleSubmissionSelect = (selectedSubmission) => {
    setSubmission(selectedSubmission);
    if (selectedSubmission) {
      setActiveStep(selectedSubmission.current_step || 2);
      // Update gate status based on submission
      const newGateStatus = {};
      if (selectedSubmission.intent_confirmed) newGateStatus[2] = true;
      if (selectedSubmission.strat_tac_reviewed) newGateStatus[3] = true;
      if (selectedSubmission.synthesis_reviewed) newGateStatus[4] = true;
      if (selectedSubmission.questions_answered) newGateStatus[5] = true;
      if (selectedSubmission.summary_confirmed) newGateStatus[6] = true;
      setGateStatus({ ...gateStatus, ...newGateStatus });
      
      // Switch to wizard panel on mobile
      if (isMobile) {
        setActivePanel('wizard');
      }
    } else {
      // New submission
      setActiveStep(1);
      setGateStatus({ 1: false, 2: false, 3: false, 4: false, 5: false, 6: false });
      if (isMobile) {
        setActivePanel('wizard');
      }
    }
  };

  const handleGroupCreate = async (groupData) => {
    try {
      const response = await fetch('/api/sdip/groups', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(groupData)
      });

      if (!response.ok) throw new Error('Failed to create group');

      const data = await response.json();
      setShowGroupModal(false);
      setSelectedSubmissions([]);
      setRefreshSubmissions(prev => prev + 1);
      
      // Load the new group for editing
      // This would require additional API endpoint to get group details
      alert('Group created successfully!');
    } catch (err) {
      setError(err.message);
    }
  };

  const handleSelectionChange = (newSelection) => {
    setSelectedSubmissions(newSelection);
  };

  const handleNewSubmission = () => {
    handleSubmissionSelect(null);
  };

  // Mobile layout
  if (isMobile) {
    return (
      <div className="h-screen flex flex-col bg-gray-50 dark:bg-gray-900">
        {/* Mobile Header */}
        <div className={`flex items-center justify-between ${isCompact ? 'p-2 sm:p-3' : 'p-3 sm:p-4'} border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800`}>
          <h1 className={`font-bold text-gray-900 dark:text-white ${isCompact ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'}`}>Directive Lab</h1>
          <button
            onClick={handleNewSubmission}
            className={`inline-flex items-center gap-1 bg-blue-600 text-white font-medium rounded hover:bg-blue-700 transition-colors ${
              isCompact ? 'px-2 py-1 text-xs sm:text-sm' : 'px-2 py-1 text-sm'
            }`}
          >
            <Plus className={isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'} />
            New
          </button>
        </div>

        {/* Mobile Panel Switcher */}
        <div className={`flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1 ${isCompact ? 'mx-2 mt-2 sm:mx-3 sm:mt-3' : 'mx-3 mt-3'}`}>
          <button
            onClick={() => setActivePanel('submissions')}
            className={`flex-1 font-medium rounded transition-all ${
              isCompact ? 'py-1 px-1.5 text-xs sm:text-sm' : 'py-1.5 px-2 text-sm'
            } ${
              activePanel === 'submissions'
                ? 'bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 shadow-sm'
                : 'text-gray-600 dark:text-gray-400'
            }`}
          >
            Submissions
          </button>
          <button
            onClick={() => setActivePanel('wizard')}
            className={`flex-1 font-medium rounded transition-all ${
              isCompact ? 'py-1 px-1.5 text-xs sm:text-sm' : 'py-1.5 px-2 text-sm'
            } ${
              activePanel === 'wizard'
                ? 'bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 shadow-sm'
                : 'text-gray-600 dark:text-gray-400'
            }`}
          >
            Step Wizard
          </button>
        </div>

        {/* Mobile Panel Content */}
        <div className="flex-1 overflow-hidden">
          {activePanel === 'submissions' ? (
            <RecentSubmissions
              onSubmissionSelect={handleSubmissionSelect}
              onGroupCreate={() => setShowGroupModal(true)}
              selectedSubmissionId={submission?.id}
              onSelectionChange={handleSelectionChange}
              refreshTrigger={refreshSubmissions}
              isCompact={isCompact}
            />
          ) : (
            <div className="flex flex-col h-full">
              {/* Mobile Progress Indicator */}
              {submission && (
                <ProgressIndicator
                  currentStep={activeStep}
                  completedGates={gateStatus}
                  isCompact={isCompact}
                />
              )}

              {/* Error Display */}
              {error && (
                <div className={`bg-red-50 border border-red-200 rounded flex items-start ${
                  isCompact ? 'mx-2 mt-2 p-1.5 sm:mx-3 sm:mt-3 sm:p-2' : 'mx-3 mt-3 p-2'
                }`}>
                  <AlertCircle className={`text-red-500 mr-2 mt-0.5 flex-shrink-0 ${isCompact ? 'w-3 h-3 sm:w-4 sm:h-4' : 'w-4 h-4'}`} />
                  <span className={`text-red-700 ${isCompact ? 'text-xs' : 'text-xs sm:text-sm'}`}>{error}</span>
                </div>
              )}

              {/* Mobile Content */}
              <div className={`flex-1 overflow-y-auto ${isCompact ? 'p-2 sm:p-3' : 'p-3'}`}>
                {!submission ? (
                  <div className="text-center py-8">
                    <p className={`text-gray-600 dark:text-gray-400 mb-4 ${isCompact ? 'text-xs sm:text-sm' : 'text-sm'}`}>
                      Select a submission or create a new one to begin
                    </p>
                    <div className={`bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-700 ${
                      isCompact ? 'p-3 sm:p-4' : 'p-4'
                    }`}>
                      {renderStepContent(1)}
                    </div>
                  </div>
                ) : (
                  <div className={`space-y-${isCompact ? '1 sm:space-y-2' : '2'}`}>
                    {steps.map(step => {
                      const isActive = activeStep === step.id;
                      const isComplete = gateStatus[step.id];
                      const isLocked = !canAccessStep(step.id);

                      return (
                        <div
                          key={step.id}
                          className={`bg-white dark:bg-gray-800 border rounded ${
                            isActive ? 'border-blue-500 shadow-sm' : 'border-gray-200 dark:border-gray-700'
                          } ${isLocked ? 'opacity-50' : ''}`}
                        >
                          <button
                            onClick={() => handleStepClick(step.id)}
                            disabled={isLocked}
                            className={`w-full flex items-center justify-between hover:bg-gray-50 dark:hover:bg-gray-700/50 disabled:cursor-not-allowed transition-colors ${
                              isCompact ? 'p-2 sm:p-2.5' : 'p-2.5'
                            }`}
                          >
                            <div className={`flex items-center ${isCompact ? 'gap-1.5 sm:gap-2' : 'gap-2'}`}>
                              <div className={`rounded text-xs ${
                                isCompact ? 'p-0.5 sm:p-1' : 'p-1'
                              } ${
                                isComplete ? 'bg-green-100 text-green-600' :
                                isActive ? 'bg-blue-100 text-blue-600' :
                                'bg-gray-100 text-gray-400'
                              }`}>
                                {isComplete ? <Check className={isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'} /> : 
                                 isLocked ? <Lock className={isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'} /> : 
                                 step.icon && React.cloneElement(step.icon, { className: isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5' })}
                              </div>
                              <div className="text-left">
                                <h3 className={`font-medium ${isCompact ? 'text-xs' : 'text-xs sm:text-sm'}`}>
                                  Step {step.id}: {step.title}
                                </h3>
                              </div>
                            </div>
                            <div>
                              {isActive ? 
                                <ChevronDown className={`text-gray-400 ${isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'}`} /> : 
                                <ChevronRight className={`text-gray-400 ${isCompact ? 'w-3 h-3 sm:w-3.5 sm:h-3.5' : 'w-3.5 h-3.5'}`} />
                              }
                            </div>
                          </button>

                          {isActive && (
                            <div className={`border-t border-gray-200 dark:border-gray-700 ${
                              isCompact ? 'p-2 sm:p-3' : 'p-3'
                            }`}>
                              {renderStepContent(step.id)}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Group Creation Modal */}
        <GroupCreationModal
          isOpen={showGroupModal}
          onClose={() => setShowGroupModal(false)}
          selectedSubmissions={selectedSubmissions}
          onCreateGroup={handleGroupCreate}
          isCompact={isCompact}
        />
      </div>
    );
  }

  // Desktop layout
  return (
    <div className="h-screen flex bg-gray-50 dark:bg-gray-900 overflow-hidden">
      {/* Left Panel - Recent Submissions */}
      <div className={`border-r border-gray-200 dark:border-gray-700 flex-shrink-0 ${
        isCompact ? 'w-64 sm:w-72 lg:w-80' : 'w-80 lg:w-96'
      }`}>
        <RecentSubmissions
          onSubmissionSelect={handleSubmissionSelect}
          onGroupCreate={() => setShowGroupModal(true)}
          selectedSubmissionId={submission?.id}
          onSelectionChange={handleSelectionChange}
          refreshTrigger={refreshSubmissions}
          isCompact={isCompact}
        />
      </div>

      {/* Right Panel - Step Wizard */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Header */}
        <div className={`flex items-center justify-between border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 ${
          isCompact ? 'p-3 sm:p-4' : 'p-4 lg:p-6'
        }`}>
          <div className={`flex items-center ${isCompact ? 'gap-2 sm:gap-3' : 'gap-4'}`}>
            <h1 className={`font-bold text-gray-900 dark:text-white ${
              isCompact ? 'text-base sm:text-lg' : 'text-lg sm:text-xl lg:text-2xl'
            }`}>Directive Lab</h1>
            {submission && (
              <span className={`bg-blue-100 text-blue-800 rounded-full ${
                isCompact ? 'px-1.5 py-0.5 text-xs' : 'px-2 py-1 text-xs sm:text-sm'
              }`}>
                {submission.submission_title || 'Untitled'}
              </span>
            )}
          </div>
          
          <button
            onClick={handleNewSubmission}
            className={`inline-flex items-center gap-1 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors ${
              isCompact ? 'px-2 py-1 text-xs sm:px-3 sm:py-1.5 sm:text-sm' : 'px-3 py-1.5 text-sm sm:px-4 sm:py-2'
            }`}
          >
            <Plus className={isCompact ? 'w-3 h-3 sm:w-4 sm:h-4' : 'w-4 h-4'} />
            {isCompact ? 'New' : 'New Submission'}
          </button>
        </div>

        {/* Progress Indicator */}
        {submission && (
          <ProgressIndicator
            currentStep={activeStep}
            completedGates={gateStatus}
            isCompact={isCompact}
          />
        )}

        {/* Error Display */}
        {error && (
          <div className={`bg-red-50 border border-red-200 rounded-lg flex items-start ${
            isCompact ? 'mx-3 mt-3 p-2 sm:mx-4 sm:mt-4 sm:p-3' : 'mx-4 mt-4 p-3'
          }`}>
            <AlertCircle className={`text-red-500 mr-2 mt-0.5 flex-shrink-0 ${isCompact ? 'w-3.5 h-3.5 sm:w-4 sm:h-4' : 'w-4 h-4'}`} />
            <span className={`text-red-700 ${isCompact ? 'text-xs sm:text-sm' : 'text-sm'}`}>{error}</span>
          </div>
        )}

        {/* Main Content Area */}
        <div className="flex-1 overflow-y-auto">
          {!submission ? (
            // New submission or empty state
            <div className={`h-full flex flex-col items-center justify-center text-center ${
              isCompact ? 'p-4 sm:p-6' : 'p-8'
            }`}>
              <div className={`bg-blue-100 rounded-full flex items-center justify-center mb-4 ${
                isCompact ? 'w-12 h-12 sm:w-14 sm:h-14' : 'w-16 h-16'
              }`}>
                <Target className={`text-blue-600 ${isCompact ? 'w-6 h-6 sm:w-7 sm:h-7' : 'w-8 h-8'}`} />
              </div>
              <h3 className={`font-medium text-gray-800 dark:text-gray-200 mb-2 ${
                isCompact ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'
              }`}>
                Ready to create a new submission
              </h3>
              <p className={`text-gray-600 dark:text-gray-400 mb-6 max-w-md ${
                isCompact ? 'text-xs sm:text-sm' : 'text-sm'
              }`}>
                Start by providing your feedback and optional screenshot. The system will guide you through 6 validation steps.
              </p>
              
              {/* New submission form */}
              <div className={`w-full ${isCompact ? 'max-w-xl sm:max-w-2xl' : 'max-w-2xl'}`}>
                <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 ${
                  isCompact ? 'p-4 sm:p-5' : 'p-6'
                }`}>
                  {renderStepContent(1)}
                </div>
              </div>
            </div>
          ) : (
            // Step accordion for selected submission
            <div className={`space-y-3 ${isCompact ? 'p-3 sm:p-4' : 'p-4 lg:p-6'}`}>
              {steps.map(step => {
                const isActive = activeStep === step.id;
                const isComplete = gateStatus[step.id];
                const isLocked = !canAccessStep(step.id);

                return (
                  <div
                    key={step.id}
                    className={`bg-white dark:bg-gray-800 border rounded-lg ${
                      isActive ? 'border-blue-500 shadow-sm' : 'border-gray-200 dark:border-gray-700'
                    } ${isLocked ? 'opacity-50' : ''}`}
                  >
                    <button
                      onClick={() => handleStepClick(step.id)}
                      disabled={isLocked}
                      className={`w-full flex items-center justify-between hover:bg-gray-50 dark:hover:bg-gray-700/50 disabled:cursor-not-allowed transition-colors ${
                        isCompact ? 'p-2.5 sm:p-3' : 'p-3 lg:p-4'
                      }`}
                    >
                      <div className={`flex items-center ${isCompact ? 'gap-2 sm:gap-3' : 'gap-3'}`}>
                        <div className={`rounded ${
                          isCompact ? 'p-1 sm:p-1.5' : 'p-1.5'
                        } ${
                          isComplete ? 'bg-green-100 text-green-600' :
                          isActive ? 'bg-blue-100 text-blue-600' :
                          'bg-gray-100 text-gray-400'
                        }`}>
                          {isComplete ? <Check className={isCompact ? 'w-3.5 h-3.5 sm:w-4 sm:h-4' : 'w-4 h-4'} /> : 
                           isLocked ? <Lock className={isCompact ? 'w-3.5 h-3.5 sm:w-4 sm:h-4' : 'w-4 h-4'} /> : 
                           step.icon && React.cloneElement(step.icon, { className: isCompact ? 'w-3.5 h-3.5 sm:w-4 sm:h-4' : 'w-4 h-4' })}
                        </div>
                        <div className="text-left">
                          <h3 className={`font-medium ${
                            isCompact ? 'text-xs sm:text-sm' : 'text-sm'
                          }`}>
                            Step {step.id}: {step.title}
                          </h3>
                          <p className={`text-gray-600 dark:text-gray-400 ${
                            isCompact ? 'text-xs' : 'text-xs sm:text-sm'
                          }`}>{step.description}</p>
                        </div>
                      </div>
                      <div>
                        {isActive ? 
                          <ChevronDown className={`text-gray-400 ${isCompact ? 'w-3.5 h-3.5 sm:w-4 sm:h-4' : 'w-4 h-4'}`} /> : 
                          <ChevronRight className={`text-gray-400 ${isCompact ? 'w-3.5 h-3.5 sm:w-4 sm:h-4' : 'w-4 h-4'}`} />
                        }
                      </div>
                    </button>

                    {isActive && (
                      <div className={`border-t border-gray-200 dark:border-gray-700 ${
                        isCompact ? 'p-3 sm:p-4' : 'p-4 lg:p-5'
                      }`}>
                        {renderStepContent(step.id)}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>

      {/* Group Creation Modal */}
      <GroupCreationModal
        isOpen={showGroupModal}
        onClose={() => setShowGroupModal(false)}
        selectedSubmissions={selectedSubmissions}
        onCreateGroup={handleGroupCreate}
        isCompact={isCompact}
      />
    </div>
  );
};

export default DirectiveLab;