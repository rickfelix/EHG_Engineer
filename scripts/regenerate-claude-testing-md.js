#!/usr/bin/env node

/**
 * Regenerate CLAUDE-TESTING.md from Database
 * Follows database-first principle - markdown files are generated from database
 */

import { createClient } from '@supabase/supabase-js';
import { promises as fs } from 'fs';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function regenerateClaudeTestingMd() {
  console.log('🔄 Regenerating CLAUDE-TESTING.md from database...\n');

  try {
    // Fetch testing sub-agent from database
    const { data: testingAgent, error } = await supabase
      .from('leo_sub_agents')
      .select('*')
      .eq('code', 'TESTING')
      .single();

    if (error) {
      console.error('❌ Error fetching testing sub-agent:', error);
      process.exit(1);
    }

    console.log('✅ Fetched testing sub-agent from database');
    console.log(`   Version: ${testingAgent.metadata?.version || 'N/A'}`);
    console.log(`   Updated: ${testingAgent.metadata?.updated_date || 'N/A'}\n`);

    // Generate markdown content
    const markdownContent = `# Testing Sub-Agent Context

**Generated from Database**: ${new Date().toISOString()}
**Version**: ${testingAgent.metadata?.version || 'N/A'}
**Sub-Agent Code**: ${testingAgent.code}
**Sub-Agent ID**: ${testingAgent.id}

---

${testingAgent.description}

---

## Capabilities

${testingAgent.capabilities.map((cap, i) => `${i + 1}. ${cap}`).join('\n')}

---

## Activation

**Type**: ${testingAgent.activation_type}
**Priority**: ${testingAgent.priority}
**Active**: ${testingAgent.active}

**Automatic Triggers**:
- "coverage" keyword in any context
- "protected route" keyword
- "build error" keyword
- "test infrastructure" keyword
- "testing evidence" keyword
- "user stories" keyword
- "playwright" keyword
- "mcp" keyword
- "browser automation" keyword
- **"test", "testing", "E2E", "QA"** - ANY testing-related keywords

**Manual Execution**:
\`\`\`bash
# Standard E2E execution (MANDATORY)
node scripts/qa-engineering-director-enhanced.js <SD-ID> --full-e2e

# Options (use sparingly)
--skip-build             # Skip build validation
--skip-migrations        # Skip migration checks
--no-auto-migrations     # Don't auto-execute migrations
\`\`\`

---

## Database Metadata

\`\`\`json
${JSON.stringify(testingAgent.metadata, null, 2)}
\`\`\`

---

## Integration with LEO Protocol

**Sub-Agent Role**: Quality Assurance and Testing Automation
**Script Path**: ${testingAgent.script_path || 'N/A'}
**Context File**: ${testingAgent.context_file || 'This file'}

**Storage Location**: \`leo_sub_agents\` table in EHG_Engineer database

---

*This file is auto-generated from the database. To update, modify the \`leo_sub_agents\` table entry for TESTING sub-agent, then run this script.*
*DO NOT edit this file directly - changes will be overwritten on next generation.*

---

**Last Generated**: ${new Date().toISOString()}
**Script**: scripts/regenerate-claude-testing-md.js
`;

    // Write to file
    const outputPath = path.join(__dirname, '..', 'templates', 'claude-md', 'sub-agents', 'CLAUDE-TESTING.md');
    await fs.writeFile(outputPath, markdownContent, 'utf8');

    console.log('✅ CLAUDE-TESTING.md regenerated successfully!');
    console.log(`   Path: ${outputPath}`);
    console.log(`   Size: ${Buffer.byteLength(markdownContent, 'utf8')} bytes\n`);

    console.log('📊 Summary:');
    console.log(`   - Version: ${testingAgent.metadata?.version || 'N/A'}`);
    console.log(`   - Capabilities: ${testingAgent.capabilities.length}`);
    console.log(`   - Improvements: ${Object.keys(testingAgent.metadata?.improvements || {}).length}`);
    console.log(`   - Description Length: ${testingAgent.description.length} chars\n`);

    console.log('🎯 Next Steps:');
    console.log('   1. Review the generated file: templates/claude-md/sub-agents/CLAUDE-TESTING.md');
    console.log('   2. Test the sub-agent with a sample SD');
    console.log('   3. Commit changes with appropriate message\n');

    return outputPath;

  } catch (err) {
    console.error('❌ Unexpected error:', err);
    process.exit(1);
  }
}

// Run the regeneration
regenerateClaudeTestingMd().then(() => {
  console.log('🎉 Regeneration complete!');
  process.exit(0);
});
