#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function checkRetrospective() {
  const sdId = '0d5f1ecc-80b1-4a9c-b4e1-d1bd4a373cda';

  const { data, error } = await supabase
    .from('retrospectives')
    .select('*')
    .eq('sd_id', sdId)
    .order('created_at', { ascending: false })
    .limit(1);

  if (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }

  if (!data || data.length === 0) {
    console.log('❌ No retrospective found for SD-UAT-009');
    console.log('\n📝 Retrospective should have been generated by complete-sd.js');
    console.log('Let me check if the script exists...');
  } else {
    console.log('✅ Retrospective found!');
    console.log('\n📊 Details:');
    console.log('   ID:', data[0].id);
    console.log('   Created:', data[0].created_at);
    console.log('   Quality Score:', data[0].quality_score);
    console.log('   Satisfaction:', data[0].team_satisfaction);
    console.log('\n📝 What Went Well (' + (Array.isArray(data[0].what_went_well) ? data[0].what_went_well.length : 0) + ' items):');
    if (Array.isArray(data[0].what_went_well)) {
      data[0].what_went_well.slice(0, 5).forEach((item, i) => {
        console.log(`   ${i+1}. ${item}`);
      });
      if (data[0].what_went_well.length > 5) {
        console.log(`   ... and ${data[0].what_went_well.length - 5} more`);
      }
    }
    console.log('\n⚠️  What Needs Improvement (' + (Array.isArray(data[0].what_needs_improvement) ? data[0].what_needs_improvement.length : 0) + ' items):');
    if (Array.isArray(data[0].what_needs_improvement)) {
      data[0].what_needs_improvement.slice(0, 3).forEach((item, i) => {
        console.log(`   ${i+1}. ${item}`);
      });
      if (data[0].what_needs_improvement.length > 3) {
        console.log(`   ... and ${data[0].what_needs_improvement.length - 3} more`);
      }
    }
    console.log('\n💡 Key Learnings (' + (Array.isArray(data[0].key_learnings) ? data[0].key_learnings.length : 0) + ' items):');
    if (Array.isArray(data[0].key_learnings)) {
      data[0].key_learnings.slice(0, 3).forEach((item, i) => {
        console.log(`   ${i+1}. ${item}`);
      });
      if (data[0].key_learnings.length > 3) {
        console.log(`   ... and ${data[0].key_learnings.length - 3} more`);
      }
    }
    console.log('\n✅ Action Items (' + (Array.isArray(data[0].action_items) ? data[0].action_items.length : 0) + ' items):');
    if (Array.isArray(data[0].action_items)) {
      data[0].action_items.slice(0, 3).forEach((item, i) => {
        console.log(`   ${i+1}. ${item}`);
      });
      if (data[0].action_items.length > 3) {
        console.log(`   ... and ${data[0].action_items.length - 3} more`);
      }
    }
  }
}

checkRetrospective().catch(console.error);
