#!/usr/bin/env node

/**
 * RETROSPECTIVE QUALITY VALIDATOR
 * Validates retrospective meets quality standards
 * Returns actionable feedback for improvements
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

const QUALITY_THRESHOLDS = {
  what_went_well_min: 3,
  what_went_well_excellent: 8,
  what_needs_improvement_min: 2,
  what_needs_improvement_excellent: 5,
  key_learnings_min: 3,
  key_learnings_excellent: 8,
  action_items_min: 2,
  action_items_excellent: 5,
  quality_score_min: 70,
  quality_score_excellent: 85,
  team_satisfaction_min: 6,
  team_satisfaction_excellent: 8
};

function getBadge(score) {
  if (score >= 90) return 'üü¢ Excellent';
  if (score >= 80) return 'üü° Good';
  if (score >= 70) return 'üü† Adequate';
  return 'üî¥ Needs Work';
}

function validateSection(sectionName, items, minThreshold, excellentThreshold) {
  const count = Array.isArray(items) ? items.length : 0;
  const status = count >= excellentThreshold ? '‚úÖ Excellent' :
                 count >= minThreshold ? '‚úÖ Meets Minimum' :
                 '‚ùå Below Minimum';

  return {
    section: sectionName,
    count,
    status,
    meetsMin: count >= minThreshold,
    isExcellent: count >= excellentThreshold,
    recommendation: count < minThreshold ?
      `Add ${minThreshold - count} more item(s)` :
      count < excellentThreshold ?
      `Consider adding ${excellentThreshold - count} more for excellent quality` :
      'Section meets excellent quality standards'
  };
}

async function validateRetrospectiveQuality(sdId) {
  console.log(`\nüîç RETROSPECTIVE QUALITY VALIDATOR`);
  console.log(`‚ïê`.repeat(60));

  // Get SD details
  const { data: sd, error: sdError } = await supabase
    .from('strategic_directives_v2')
    .select('*')
    .eq('id', sdId)
    .single();

  if (sdError || !sd) {
    console.error(`‚ùå SD not found: ${sdId}`);
    process.exit(1);
  }

  console.log(`SD: ${sd.sd_key} - ${sd.title}\n`);

  // Get retrospective
  const { data: retro, error: retroError } = await supabase
    .from('retrospectives')
    .select('*')
    .eq('sd_id', sdId)
    .order('created_at', { ascending: false })
    .limit(1);

  if (retroError || !retro || retro.length === 0) {
    console.log(`‚ùå No retrospective found for ${sd.sd_key}`);
    console.log(`\nüìù Action Required:`);
    console.log(`   Run: node scripts/generate-comprehensive-retrospective.js ${sdId}`);
    process.exit(1);
  }

  const retrospective = retro[0];
  console.log(`Retrospective ID: ${retrospective.id}`);
  console.log(`Generated By: ${retrospective.generated_by}`);
  console.log(`Created: ${retrospective.created_at}\n`);

  // Validate sections
  const validations = [
    validateSection(
      'What Went Well',
      retrospective.what_went_well,
      QUALITY_THRESHOLDS.what_went_well_min,
      QUALITY_THRESHOLDS.what_went_well_excellent
    ),
    validateSection(
      'What Needs Improvement',
      retrospective.what_needs_improvement,
      QUALITY_THRESHOLDS.what_needs_improvement_min,
      QUALITY_THRESHOLDS.what_needs_improvement_excellent
    ),
    validateSection(
      'Key Learnings',
      retrospective.key_learnings,
      QUALITY_THRESHOLDS.key_learnings_min,
      QUALITY_THRESHOLDS.key_learnings_excellent
    ),
    validateSection(
      'Action Items',
      retrospective.action_items,
      QUALITY_THRESHOLDS.action_items_min,
      QUALITY_THRESHOLDS.action_items_excellent
    )
  ];

  console.log(`üìä SECTION VALIDATION`);
  console.log(`‚ïê`.repeat(60));

  let allSectionsMeetMin = true;
  let allSectionsExcellent = true;

  validations.forEach(v => {
    console.log(`\n${v.section}:`);
    console.log(`   Items: ${v.count}`);
    console.log(`   Status: ${v.status}`);
    console.log(`   ${v.recommendation}`);

    if (!v.meetsMin) allSectionsMeetMin = false;
    if (!v.isExcellent) allSectionsExcellent = false;
  });

  // Validate scores
  console.log(`\n\nüìà SCORE VALIDATION`);
  console.log(`‚ïê`.repeat(60));

  const qualityScore = retrospective.quality_score || 0;
  const satisfactionScore = retrospective.team_satisfaction || 0;

  console.log(`\nQuality Score: ${qualityScore}/100`);
  console.log(`   Badge: ${getBadge(qualityScore)}`);
  if (qualityScore < QUALITY_THRESHOLDS.quality_score_min) {
    console.log(`   ‚ùå Below minimum threshold (${QUALITY_THRESHOLDS.quality_score_min})`);
  } else if (qualityScore < QUALITY_THRESHOLDS.quality_score_excellent) {
    console.log(`   ‚úÖ Meets minimum, target ${QUALITY_THRESHOLDS.quality_score_excellent} for excellent`);
  } else {
    console.log(`   ‚úÖ Excellent quality`);
  }

  console.log(`\nTeam Satisfaction: ${satisfactionScore}/10`);
  if (satisfactionScore < QUALITY_THRESHOLDS.team_satisfaction_min) {
    console.log(`   ‚ùå Below minimum threshold (${QUALITY_THRESHOLDS.team_satisfaction_min})`);
  } else if (satisfactionScore < QUALITY_THRESHOLDS.team_satisfaction_excellent) {
    console.log(`   ‚úÖ Meets minimum, target ${QUALITY_THRESHOLDS.team_satisfaction_excellent} for excellent`);
  } else {
    console.log(`   ‚úÖ Excellent satisfaction`);
  }

  // Business value check
  console.log(`\n\nüíº BUSINESS VALUE`);
  console.log(`‚ïê`.repeat(60));

  const hasBusinessValue = retrospective.business_value_delivered &&
                          retrospective.business_value_delivered.length > 10;

  console.log(`\nBusiness Value Delivered:`);
  if (hasBusinessValue) {
    console.log(`   ‚úÖ Documented: "${retrospective.business_value_delivered}"`);
  } else {
    console.log(`   ‚ùå Missing or generic`);
    console.log(`   Add specific business value statement`);
  }

  // Overall verdict
  console.log(`\n\nüéØ OVERALL VERDICT`);
  console.log(`‚ïê`.repeat(60));

  const overallScore = qualityScore;
  const badge = getBadge(overallScore);

  console.log(`\n${badge}`);
  console.log(`Quality Score: ${overallScore}/100\n`);

  if (overallScore >= 90) {
    console.log(`‚úÖ Retrospective meets excellent quality standards!`);
    console.log(`   Ready for LEAD review and archival`);
  } else if (overallScore >= 80) {
    console.log(`‚úÖ Retrospective meets good quality standards`);
    console.log(`   Optional: Consider enhancements for excellent rating`);
  } else if (overallScore >= 70) {
    console.log(`‚ö†Ô∏è  Retrospective meets minimum standards`);
    console.log(`   Recommended: Enhance before final approval`);
  } else {
    console.log(`‚ùå Retrospective needs improvement`);
    console.log(`   Required: Enhancement before LEAD approval`);
  }

  // Action recommendations
  console.log(`\n\nüìã RECOMMENDED ACTIONS`);
  console.log(`‚ïê`.repeat(60));

  const needsWork = validations.filter(v => !v.meetsMin);
  const canImprove = validations.filter(v => v.meetsMin && !v.isExcellent);

  if (needsWork.length > 0) {
    console.log(`\nüî¥ REQUIRED (Below Minimum):`);
    needsWork.forEach(v => {
      console.log(`   ‚Ä¢ ${v.section}: ${v.recommendation}`);
    });
  }

  if (canImprove.length > 0) {
    console.log(`\nüü° OPTIONAL (For Excellent Rating):`);
    canImprove.forEach(v => {
      console.log(`   ‚Ä¢ ${v.section}: ${v.recommendation}`);
    });
  }

  if (needsWork.length === 0 && canImprove.length === 0) {
    console.log(`\n‚úÖ No improvements needed - retrospective is excellent!`);
  }

  if (!hasBusinessValue) {
    console.log(`\nüü° ENHANCE:`);
    console.log(`   ‚Ä¢ Add specific business value statement`);
  }

  if (retrospective.generated_by === 'MANUAL') {
    console.log(`\nüí° SUGGESTION:`);
    console.log(`   Retrospective was manually generated (template-based)`);
    console.log(`   Consider running: node scripts/enhance-retrospective-sd-${sd.sd_key.toLowerCase()}.js`);
  }

  console.log(`\n${'‚ïê'.repeat(60)}\n`);

  // Exit code based on quality
  if (overallScore < QUALITY_THRESHOLDS.quality_score_min) {
    process.exit(1); // Fail if below minimum
  } else {
    process.exit(0); // Pass if meets minimum
  }
}

// CLI usage
async function main() {
  const sdId = process.argv[2];

  if (!sdId) {
    console.error('Usage: node validate-retrospective-quality.js <SD_UUID>');
    console.error('');
    console.error('This script validates retrospective quality and provides recommendations.');
    console.error('Exit code 0 = meets minimum quality');
    console.error('Exit code 1 = below minimum, needs work');
    console.error('');
    process.exit(1);
  }

  try {
    await validateRetrospectiveQuality(sdId);
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

main();
