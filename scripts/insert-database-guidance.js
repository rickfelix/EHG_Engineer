import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables
dotenv.config({ path: join(__dirname, '../.env') });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing environment variables');
  console.error('SUPABASE_URL:', supabaseUrl ? 'Set' : 'Missing');
  console.error('SUPABASE_ANON_KEY:', supabaseKey ? 'Set' : 'Missing');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function insertDatabaseGuidance() {
  const content = `### REQUIRED: Database Operations Only

**‚ö†Ô∏è CRITICAL: One Table at a Time**
- When manipulating Supabase tables, **ALWAYS operate on ONE table at a time**
- Batch operations across multiple tables often fail or cause inconsistencies
- Complete each table operation fully before moving to the next table
- Verify success after each table operation before proceeding

**Strategic Directives**:
- ‚úÖ Create in \`strategic_directives_v2\` table
- ‚úÖ Use \`scripts/create-strategic-directive.js\` or dashboard
- ‚úÖ ALL SD data must be in database, not files
- ‚úÖ **One SD insertion at a time** - verify before next

**PRDs (Product Requirements)**:
- ‚úÖ Create in \`product_requirements_v2\` table
- ‚úÖ Use \`scripts/add-prd-to-database.js\`
- ‚úÖ Link to SD via \`strategic_directive_id\` foreign key
- ‚úÖ **One PRD insertion at a time** - verify before next

**Retrospectives**:
- ‚úÖ Create in \`retrospectives\` table
- ‚úÖ Use \`scripts/generate-comprehensive-retrospective.js\`
- ‚úÖ Trigger: Continuous Improvement Coach sub-agent
- ‚úÖ Link to SD via \`sd_id\` foreign key
- ‚úÖ **One retrospective at a time** - verify before next

**Handoffs**:
- ‚úÖ Store in handoff tracking tables
- ‚úÖ 7-element structure required
- ‚úÖ Link to SD and phase
- ‚úÖ **One handoff at a time** - verify before next

**Progress & Verification**:
- ‚úÖ Update database fields directly
- ‚úÖ Store verification results in database
- ‚úÖ Track in real-time via dashboard
- ‚úÖ **One record update at a time** - verify before next`;

  // First check if section already exists
  const { data: existing, error: fetchError } = await supabase
    .from('leo_protocol_sections')
    .select('*')
    .eq('section_key', 'database_operations_one_table')
    .maybeSingle();

  if (fetchError) {
    console.error('‚ùå Error checking existing:', fetchError);
    return;
  }

  if (existing) {
    console.log('üìù Section already exists, updating...');
    const { data, error } = await supabase
      .from('leo_protocol_sections')
      .update({
        content: content,
        updated_at: new Date().toISOString()
      })
      .eq('id', existing.id)
      .select();

    if (error) {
      console.error('‚ùå Error updating:', error);
    } else {
      console.log('‚úÖ Updated database_operations_one_table section');
      console.log('Section ID:', data[0].id);
    }
  } else {
    console.log('üìù Inserting new section...');
    const { data, error } = await supabase
      .from('leo_protocol_sections')
      .insert({
        section_key: 'database_operations_one_table',
        section_title: 'Database Operations - One Table at a Time',
        content: content,
        protocol_id: 'leo-v4-2-0-story-gates',
        display_order: 26,
        category: 'database',
        is_active: true
      })
      .select();

    if (error) {
      console.error('‚ùå Error inserting:', error);
      console.error('Details:', JSON.stringify(error, null, 2));
    } else {
      console.log('‚úÖ Inserted new database_operations_one_table section');
      console.log('Section ID:', data[0].id);
    }
  }
}

insertDatabaseGuidance().catch(console.error);
