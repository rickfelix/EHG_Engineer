#!/usr/bin/env node

/**
 * Execute SD Script Migration
 * Automatically migrates SD-specific scripts to template equivalents
 * Generated by DOCMON analysis
 */

import fs from 'fs/promises';
import path from 'path';
import chalk from 'chalk';

const SCRIPT_DIR = 'scripts';
const ARCHIVE_DIR = 'scripts/archived-sd-scripts';

const MIGRATION_MAP = {
  // Handoff Scripts - CONFIRMED WORKING
  'create-lead-plan-handoff-sd028.js': 'node templates/create-handoff.js LEAD PLAN SD-028',
  'create-plan-exec-handoff-sd008.js': 'node templates/create-handoff.js PLAN EXEC SD-008',
  'sd003-lead-plan-handoff.js': 'node templates/create-handoff.js LEAD PLAN SD-003',
  'sd027-lead-plan-handoff.js': 'node templates/create-handoff.js LEAD PLAN SD-027',
  'sd027-plan-exec-handoff.js': 'node templates/create-handoff.js PLAN EXEC SD-027',
  'sd031-lead-plan-handoff.js': 'node templates/create-handoff.js LEAD PLAN SD-031',
  'sd037-lead-plan-handoff.js': 'node templates/create-handoff.js LEAD PLAN SD-037',
  'sd039-lead-plan-handoff.js': 'node templates/create-handoff.js LEAD PLAN SD-039',
  'sd039-plan-exec-handoff.js': 'node templates/create-handoff.js PLAN EXEC SD-039',
  'sd046-lead-plan-handoff.js': 'node templates/create-handoff.js LEAD PLAN SD-046',
  'sd046-plan-exec-handoff.js': 'node templates/create-handoff.js PLAN EXEC SD-046',

  // PRD Generation Scripts - MOSTLY WORKING (minor DB issues)
  'generate-prd-sd008.js': 'node templates/generate-prd.js SD-008',
  'generate-prd-sd027.js': 'node templates/generate-prd.js SD-027',
  'generate-prd-sd037.js': 'node templates/generate-prd.js SD-037',
  'generate-prd-sd039.js': 'node templates/generate-prd.js SD-039',
  'generate-prd-sd046.js': 'node templates/generate-prd.js SD-046',

  // Phase Execution Scripts
  'execute-plan-sd008.js': 'node templates/execute-phase.js PLAN SD-008',

  // Complex handoffs (need manual review)
  'sd039-exec-plan-verification-handoff.js': 'node templates/create-handoff.js EXEC VERIFICATION SD-039',
  'sd039-plan-lead-approval-handoff.js': 'node templates/create-handoff.js PLAN APPROVAL SD-039',

  // Completion/Approval scripts ‚Üí APPROVAL phase
  'sd027-lead-final-approval.js': 'node templates/execute-phase.js APPROVAL SD-027',
  'sd039-lead-final-approval.js': 'node templates/execute-phase.js APPROVAL SD-039',
  'sd046-lead-final-approval.js': 'node templates/execute-phase.js APPROVAL SD-046',
  'sd027-completion.js': 'node templates/execute-phase.js APPROVAL SD-027',
  'sd027-exec-completion.js': 'node templates/execute-phase.js EXEC SD-027',
  'sd046-exec-completion.js': 'node templates/execute-phase.js EXEC SD-046',

  // Verification scripts ‚Üí VERIFICATION phase
  'sd028-phase1-verification.js': 'node templates/execute-phase.js VERIFICATION SD-028',
  'sd028-phase2-verification.js': 'node templates/execute-phase.js VERIFICATION SD-028',
  'sd039-plan-supervisor-verification.js': 'node templates/execute-phase.js VERIFICATION SD-039',
  'sd046-plan-supervisor-verification.js': 'node templates/execute-phase.js VERIFICATION SD-046',

  // Requirements analysis ‚Üí LEAD phase
  'sd027-lead-requirements-analysis.js': 'node templates/execute-phase.js LEAD SD-027',
  'sd046-lead-requirements-analysis.js': 'node templates/execute-phase.js LEAD SD-046'
};

async function createMigrationDocumentation() {
  await fs.mkdir(ARCHIVE_DIR, { recursive: true });

  const documentation = `# SD Script Migration Log
Generated: ${new Date().toISOString()}

## Migration Summary
- Total scripts migrated: ${Object.keys(MIGRATION_MAP).length}
- Template system provides universal functionality
- Original scripts archived for reference

## Migration Mappings

${Object.entries(MIGRATION_MAP).map(([original, template]) =>
  `### ${original}
**Template Command**: \`${template}\`
**Status**: Migrated to template system
`).join('\n')}

## Usage Notes
1. Template commands are more flexible and consistent
2. All templates support \`--force\` flag for re-execution
3. Templates automatically handle sub-agent activation
4. Database-first approach eliminates file dependencies

## Rollback Process
If needed, original scripts are available in \`${ARCHIVE_DIR}/\`

## Template System Benefits
- ‚úÖ Eliminates script proliferation
- ‚úÖ Consistent behavior across all SDs
- ‚úÖ Automatic sub-agent integration
- ‚úÖ Configuration-driven customization
- ‚úÖ Database-first architecture
`;

  await fs.writeFile(path.join(ARCHIVE_DIR, 'migration-log.md'), documentation);
  return documentation;
}

async function archiveScript(scriptName) {
  const sourcePath = path.join(SCRIPT_DIR, scriptName);
  const targetPath = path.join(ARCHIVE_DIR, scriptName);

  try {
    await fs.copyFile(sourcePath, targetPath);
    await fs.unlink(sourcePath);
    return true;
  } catch (error) {
    console.log(chalk.yellow(`   ‚ö†Ô∏è  Could not archive ${scriptName}: ${error.message}`));
    return false;
  }
}

async function createTemplateShortcuts() {
  // Create convenience scripts that call templates
  const shortcuts = {
    'create-handoff.js': `#!/usr/bin/env node
// Convenience wrapper for template system
// Usage: node scripts/create-handoff.js <FROM> <TO> <SD-ID>
import { spawn } from 'child_process';
const args = process.argv.slice(2);
if (args.length !== 3) {
  console.error('Usage: node scripts/create-handoff.js <FROM> <TO> <SD-ID>');
  process.exit(1);
}
spawn('node', ['templates/create-handoff.js', ...args], { stdio: 'inherit' });`,

    'generate-prd.js': `#!/usr/bin/env node
// Convenience wrapper for template system
// Usage: node scripts/generate-prd.js <SD-ID> [--force]
import { spawn } from 'child_process';
const args = process.argv.slice(2);
if (args.length === 0) {
  console.error('Usage: node scripts/generate-prd.js <SD-ID> [--force]');
  process.exit(1);
}
spawn('node', ['templates/generate-prd.js', ...args], { stdio: 'inherit' });`,

    'execute-phase.js': `#!/usr/bin/env node
// Convenience wrapper for template system
// Usage: node scripts/execute-phase.js <PHASE> <SD-ID> [--force]
import { spawn } from 'child_process';
const args = process.argv.slice(2);
if (args.length < 2) {
  console.error('Usage: node scripts/execute-phase.js <PHASE> <SD-ID> [--force]');
  process.exit(1);
}
spawn('node', ['templates/execute-phase.js', ...args], { stdio: 'inherit' });`
  };

  for (const [filename, content] of Object.entries(shortcuts)) {
    await fs.writeFile(path.join(SCRIPT_DIR, filename), content);
    console.log(chalk.green(`   ‚úÖ Created convenience script: ${filename}`));
  }
}

async function executeMigration(dryRun = true) {
  console.log(chalk.blue.bold('üîÑ Executing SD Script Migration'));
  console.log(chalk.gray('‚ïê'.repeat(60)));

  if (dryRun) {
    console.log(chalk.yellow('üß™ DRY RUN MODE - No files will be modified'));
  }

  // Create archive directory
  if (!dryRun) {
    await fs.mkdir(ARCHIVE_DIR, { recursive: true });
  }

  let migratedCount = 0;
  let skippedCount = 0;

  console.log(chalk.cyan('\nüìã Processing script migrations...'));

  for (const [scriptName, templateCommand] of Object.entries(MIGRATION_MAP)) {
    const scriptPath = path.join(SCRIPT_DIR, scriptName);

    try {
      // Check if script exists
      await fs.access(scriptPath);

      console.log(chalk.blue(`\n   üìÑ ${scriptName}`));
      console.log(chalk.gray(`      ‚Üí ${templateCommand}`));

      if (!dryRun) {
        const archived = await archiveScript(scriptName);
        if (archived) {
          migratedCount++;
          console.log(chalk.green('      ‚úÖ Migrated and archived'));
        } else {
          skippedCount++;
          console.log(chalk.yellow('      ‚ö†Ô∏è  Archive failed - script retained'));
        }
      } else {
        migratedCount++;
        console.log(chalk.gray('      üìã Would migrate to template'));
      }

    } catch (error) {
      skippedCount++;
      console.log(chalk.gray(`   ‚è≠Ô∏è  Skipping ${scriptName} (not found)`));
    }
  }

  // Create documentation and shortcuts
  if (!dryRun) {
    await createMigrationDocumentation();
    await createTemplateShortcuts();
  }

  console.log(chalk.cyan('\nüìä Migration Summary:'));
  console.log(`   Scripts processed: ${migratedCount + skippedCount}`);
  console.log(`   Successfully migrated: ${migratedCount}`);
  console.log(`   Skipped: ${skippedCount}`);

  if (!dryRun) {
    console.log(chalk.green('\n‚úÖ Migration complete!'));
    console.log(`   üìÅ Archived scripts: ${ARCHIVE_DIR}/`);
    console.log(`   üìÑ Migration log: ${ARCHIVE_DIR}/migration-log.md`);
    console.log('   üìã Convenience scripts created in scripts/');
  } else {
    console.log(chalk.yellow('\nüí° To execute migration, run: node scripts/execute-migration.js --execute'));
  }

  return { migratedCount, skippedCount };
}

// CLI execution
if (import.meta.url === `file://${process.argv[1]}`) {
  const isExecute = process.argv.includes('--execute');

  executeMigration(!isExecute)
    .then(result => {
      console.log(chalk.green.bold('\nüéâ Migration process complete!'));
    })
    .catch(error => {
      console.error(chalk.red('‚ùå Migration failed:'), error);
      process.exit(1);
    });
}