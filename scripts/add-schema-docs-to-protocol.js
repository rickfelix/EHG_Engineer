#!/usr/bin/env node
/**
 * Add Schema Documentation Sections to LEO Protocol
 *
 * Adds schema documentation guidance to leo_protocol_sections table
 * for both CLAUDE_PLAN.md and CLAUDE_CORE.md, then regenerates files
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { execSync } from 'child_process';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY
);

// Content for CLAUDE_PLAN.md
const planSchemaContent = `## üìä Database Schema Documentation Access

**Auto-Generated Schema Docs** - Reference documentation from live Supabase databases

### Available Schema Documentation

**EHG_Engineer Database** (Management Dashboard):
- **Quick Reference**: \`docs/reference/schema/engineer/database-schema-overview.md\` (~15-20KB)
- **Detailed Tables**: \`docs/reference/schema/engineer/tables/[table_name].md\` (2-5KB each)
- **Coverage**: 159 tables documented
- **Purpose**: Strategic Directives, PRDs, retrospectives, LEO Protocol configuration
- **Repository**: /mnt/c/_EHG/EHG_Engineer/
- **Database**: dedlbzhpgkmetvhbkyzq

**EHG Application Database** (Customer-Facing):
- **Quick Reference**: \`docs/reference/schema/ehg/database-schema-overview.md\` (~15-20KB)
- **Detailed Tables**: \`docs/reference/schema/ehg/tables/[table_name].md\` (2-5KB each)
- **Coverage**: ~200 tables (requires pooler credentials to generate)
- **Purpose**: Customer features, business logic, user-facing functionality
- **Repository**: /mnt/c/_EHG/ehg/
- **Database**: liapbndqlqxdcgpwntbv

### When to Use Schema Docs

**MANDATORY during PLAN phase**:
- Creating PRDs with database changes
- Validating technical approach
- Identifying table dependencies
- Preventing schema conflicts

**PRD Database Integration**:
PRDs are stored in \`product_requirements_v2\` table (NOT markdown files). The \`add-prd-to-database.js\` script prompts for schema review and guides you to populate these fields with schema insights:
- \`technical_approach\`: Reference existing tables/columns
- \`database_changes\`: List affected tables with schema context
- \`dependencies\`: Note table relationships from schema docs

### Regenerating Schema Docs

**Automatic**:
- CI/CD workflow runs on migration changes (see \`.github/workflows/schema-docs-update.yml\`)
- Weekly scheduled runs (Sunday midnight)

**Manual**:
\`\`\`bash
# Engineer database (EHG_Engineer)
npm run schema:docs:engineer

# EHG application database (requires pooler credentials)
npm run schema:docs:ehg

# Both databases
npm run schema:docs:all

# Single table (verbose output)
npm run schema:docs:table <table_name>
\`\`\`

### Integration with PRD Creation Workflow

**Step 1: Review Schema Before PRD**
\`\`\`bash
# Quick check if tables exist
less docs/reference/schema/engineer/database-schema-overview.md | grep -A 5 "table_name"

# Detailed table review
cat docs/reference/schema/engineer/tables/strategic_directives_v2.md
\`\`\`

**Step 2: Create PRD with Schema Context**
\`\`\`bash
# Script automatically prompts for schema review
node scripts/add-prd-to-database.js SD-EXAMPLE-001
# ‚Üí Detects table names from SD description
# ‚Üí Asks: "Have you reviewed schema docs for: strategic_directives_v2, user_stories?"
# ‚Üí Guides you to populate technical_approach and database_changes fields
\`\`\`

**Step 3: PLAN Agent Validates Schema Awareness**
- PRD must reference specific tables/columns in \`technical_approach\`
- \`database_changes\` field must list affected tables
- PLAN‚ÜíEXEC handoff checks for schema validation

### Critical Reminders

‚ö†Ô∏è **Schema Docs are REFERENCE ONLY**
- Always query database directly for validation
- Schema docs may lag behind recent migrations
- Use as starting point, not source of truth

‚ö†Ô∏è **Application Context Matters**
- Each schema doc header clearly states application and database
- NEVER confuse EHG_Engineer tables with EHG tables
- Check \`**Repository**\` field to confirm where code changes go

‚ö†Ô∏è **PRD Workflow**
- PRDs are database records (product_requirements_v2 table)
- Use \`add-prd-to-database.js\` script (triggers STORIES sub-agent)
- Schema insights go in database fields, not markdown

---

*Schema docs generated by: \`scripts/generate-schema-docs-from-db.js\`*
*Auto-update workflow: \`.github/workflows/schema-docs-update.yml\`*
`;

// Content for CLAUDE_CORE.md
const coreSchemaContent = `### Database Schema Documentation

Auto-generated schema docs provide quick reference without database queries:

**Paths**:
- EHG_Engineer: \`docs/reference/schema/engineer/database-schema-overview.md\`
- EHG App: \`docs/reference/schema/ehg/database-schema-overview.md\`

**Update**: \`npm run schema:docs:engineer\` or \`npm run schema:docs:ehg\`

**PRD Integration**: PRDs stored in \`product_requirements_v2\` table (NOT markdown).
Use \`add-prd-to-database.js\` to create PRDs with schema review prompts.
`;

async function addSection(protocol_id, section_type, title, content, target_file, context_tier, order_index) {
  console.log(`\nüìù Adding "${title}" to ${target_file}...`);

  // Check if section already exists
  const { data: existing, error: checkError } = await supabase
    .from('leo_protocol_sections')
    .select('id, section_type')
    .eq('protocol_id', protocol_id)
    .eq('section_type', section_type)
    .single();

  if (checkError && checkError.code !== 'PGRST116') {
    throw checkError;
  }

  if (existing) {
    console.log(`‚ö†Ô∏è  Section "${section_type}" already exists - updating...`);
    const { error: updateError } = await supabase
      .from('leo_protocol_sections')
      .update({
        title: title,
        content: content,
        target_file: target_file,
        context_tier: context_tier,
        metadata: {
          updated_by: 'Schema Documentation Integration',
          version: 'v1.0',
          last_updated: new Date().toISOString()
        }
      })
      .eq('id', existing.id);

    if (updateError) {
      throw updateError;
    }
    console.log(`‚úÖ Updated section "${section_type}"`);
  } else {
    console.log(`‚ûï Creating new section "${section_type}"...`);
    const { error: insertError } = await supabase
      .from('leo_protocol_sections')
      .insert({
        protocol_id: protocol_id,
        section_type: section_type,
        title: title,
        content: content,
        order_index: order_index,
        target_file: target_file,
        context_tier: context_tier,
        metadata: {
          created_by: 'Schema Documentation Integration',
          version: 'v1.0',
          created_at: new Date().toISOString()
        }
      });

    if (insertError) {
      console.error('‚ùå Insert error:', insertError);
      throw insertError;
    }
    console.log(`‚úÖ Created section "${section_type}"`);
  }
}

async function main() {
  console.log('üìä Adding Schema Documentation sections to LEO Protocol...\n');

  try {
    // Determine protocol ID (use active protocol)
    const { data: protocols, error: protocolError } = await supabase
      .from('leo_protocols')
      .select('id, version')
      .eq('status', 'active')
      .order('created_at', { ascending: false })
      .limit(1);

    if (protocolError) throw protocolError;

    const protocol_id = protocols && protocols[0] ? protocols[0].id : 'leo-v4-2-0-story-gates';
    console.log(`Using protocol: ${protocol_id}\n`);

    // Add schema docs section to CLAUDE_PLAN.md
    await addSection(
      protocol_id,
      'schema_documentation_access',
      'Database Schema Documentation Access',
      planSchemaContent,
      'CLAUDE_PLAN.md',
      'PHASE_PLAN',  // context_tier
      782  // order_index - After line 775 (Mandatory Process Scripts section)
    );

    // Add schema docs reference to CLAUDE_CORE.md
    await addSection(
      protocol_id,
      'schema_documentation_reference',
      'Database Schema Documentation',
      coreSchemaContent,
      'CLAUDE_CORE.md',
      'CORE',  // context_tier
      124  // order_index - Quick reference section
    );

    console.log('\n‚úÖ All sections added successfully!');
    console.log('\nüîÑ Regenerating CLAUDE.md files from database...\n');

    // Regenerate CLAUDE.md files
    execSync('node scripts/generate-claude-md-from-db.js', { stdio: 'inherit' });

    console.log('\n‚úÖ CLAUDE.md files regenerated successfully!');
    console.log('\nüìã Summary:');
    console.log('   - Added schema documentation section to CLAUDE_PLAN.md');
    console.log('   - Added schema reference to CLAUDE_CORE.md');
    console.log('   - Regenerated all CLAUDE.md files from database');
    console.log('\nüí° Next steps:');
    console.log('   1. Review updated CLAUDE_PLAN.md and CLAUDE_CORE.md');
    console.log('   2. Test PRD creation script enhancement');
    console.log('   3. Commit changes to repository');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    if (error.details) console.error('Details:', error.details);
    if (error.hint) console.error('Hint:', error.hint);
    process.exit(1);
  }
}

main();
