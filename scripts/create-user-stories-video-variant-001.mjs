#!/usr/bin/env node

/**
 * Create User Stories for SD-VIDEO-VARIANT-001
 * Sora 2 Video Variant Testing & Optimization Engine
 */

import { createClient } from '@supabase/supabase-js';
import { randomUUID } from 'crypto';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL || 'https://dedlbzhpgkmetvhbkyzq.supabase.co',
  process.env.SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

const SD_ID = 'SD-VIDEO-VARIANT-001';
const PRD_ID = 'PRD-SD-VIDEO-VARIANT-001';

const userStories = [
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-001`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Sora 2 API Integration for Video Variant Generation',
    user_role: 'venture_team_member',
    user_want: 'to submit a single video concept prompt and receive 12-20 variants generated by Sora 2',
    user_benefit: 'we can test multiple creative approaches without manual video production',
    story_points: 8,
    priority: 'critical',
    status: 'ready',
    sprint: 'Sprint 1',
    acceptance_criteria: [
      'Sora 2 API authenticated and connected',
      'Single prompt input generates 12-20 video variants',
      'Generation completes in <10 minutes (success metric)',
      'Variants stored with unique IDs for tracking',
      'Error handling for API failures with retry logic'
    ],
    definition_of_done: [],
    technical_notes: 'Integrate OpenAI Sora 2 API, implement batch generation workflow, configure timeout and retry mechanisms',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-002`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Multi-Platform Performance Tracking',
    user_role: 'marketing_analyst',
    user_want: 'to track video performance across Instagram, TikTok, YouTube, LinkedIn, and X (Twitter)',
    user_benefit: 'I can identify which platforms drive the best engagement for each variant',
    story_points: 13,
    priority: 'critical',
    status: 'ready',
    sprint: 'Sprint 1',
    acceptance_criteria: [
      'Integration with 5 platform APIs (Instagram, TikTok, YouTube, LinkedIn, X)',
      'Metrics tracked: views, engagement rate, CTR, conversions, shares',
      '100% data completeness (all metrics for all variants)',
      'Real-time sync every 15 minutes',
      'Performance dashboard with platform comparison'
    ],
    definition_of_done: [],
    technical_notes: 'Build platform API connectors, implement metric aggregation service, create performance dashboard with Recharts',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-003`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Statistical Winner Identification Engine',
    user_role: 'data_analyst',
    user_want: 'AI to identify the winning video variant with statistical confidence',
    user_benefit: 'I make data-driven decisions backed by >70% confidence scores',
    story_points: 8,
    priority: 'high',
    status: 'ready',
    sprint: 'Sprint 2',
    acceptance_criteria: [
      'Hypothesis testing (p-value calculation) for variant comparison',
      'Confidence intervals displayed for all metrics',
      'Winner declared only if >70% statistical confidence achieved',
      'Multi-metric aggregation (weighted scoring across platforms)',
      'Visualization of statistical significance'
    ],
    definition_of_done: [],
    technical_notes: 'Implement statistical analysis library (jstat), create confidence scoring algorithm, build winner visualization',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-004`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Variant Upload and Distribution Workflow',
    user_role: 'content_manager',
    user_want: 'to upload generated variants to all 5 platforms with a single action',
    user_benefit: 'I save hours of manual posting and ensure consistent timing across platforms',
    story_points: 8,
    priority: 'high',
    status: 'ready',
    sprint: 'Sprint 2',
    acceptance_criteria: [
      'Bulk upload to Instagram, TikTok, YouTube, LinkedIn, X',
      'Platform-specific formatting applied automatically',
      'Scheduling functionality for coordinated launches',
      'Upload status tracking with error notifications',
      'Variant metadata preserved for tracking'
    ],
    definition_of_done: [],
    technical_notes: 'Create platform upload service, implement format conversion, build scheduling engine',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-005`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Performance Comparison Dashboard',
    user_role: 'marketing_director',
    user_want: 'a dashboard showing all variant performance side-by-side',
    user_benefit: 'I can visually identify trends and make quick optimization decisions',
    story_points: 5,
    priority: 'high',
    status: 'ready',
    sprint: 'Sprint 2',
    acceptance_criteria: [
      'Table view with all variants and key metrics',
      'Charts showing performance trends over time (Recharts LineChart)',
      'Platform-specific breakdowns',
      'Sort/filter by any metric',
      'Export data to CSV for reporting'
    ],
    definition_of_done: [],
    technical_notes: 'Build dashboard component (<600 LOC), integrate Recharts, implement filtering/sorting',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-006`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Automated Winner Recommendation',
    user_role: 'campaign_manager',
    user_want: 'the system to automatically recommend which variant to scale',
    user_benefit: 'I receive actionable recommendations without manual analysis',
    story_points: 5,
    priority: 'medium',
    status: 'ready',
    sprint: 'Sprint 3',
    acceptance_criteria: [
      'AI analyzes all metrics and declares a winner',
      'Recommendation includes justification and confidence score',
      'Alternative options ranked (2nd, 3rd place variants)',
      'Notification sent when winner identified',
      'Option to override AI recommendation with human judgment'
    ],
    definition_of_done: [],
    technical_notes: 'Create recommendation engine, implement notification system, build override UI',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-007`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'E2E Testing for Video Variant Workflow',
    user_role: 'qa_engineer',
    user_want: 'comprehensive E2E tests covering the entire video variant workflow',
    user_benefit: 'we ensure the system works reliably from generation to winner selection',
    story_points: 8,
    priority: 'critical',
    status: 'ready',
    sprint: 'Sprint 3',
    acceptance_criteria: [
      'Playwright E2E tests for variant generation flow',
      'Tests for platform upload simulation',
      'Performance dashboard rendering tests',
      'Winner identification workflow tests',
      '>=80% test coverage (success metric)'
    ],
    definition_of_done: [],
    technical_notes: 'Create Playwright test suite, mock Sora 2 API responses, implement test fixtures',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-008`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Component Size Compliance Enforcement',
    user_role: 'developer',
    user_want: 'automated checks to ensure all components are <600 LOC',
    user_benefit: 'we maintain code quality and adhere to architectural standards',
    story_points: 3,
    priority: 'medium',
    status: 'ready',
    sprint: 'Sprint 3',
    acceptance_criteria: [
      'Pre-commit hook scans component file sizes',
      'Build fails if any component >600 LOC',
      'ESLint rule enforces component sizing',
      'CI/CD pipeline validates compliance',
      '100% of components comply (success metric)'
    ],
    definition_of_done: [],
    technical_notes: 'Configure Husky pre-commit hook, create ESLint custom rule, add CI validation step',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-009`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Historical Variant Performance Archive',
    user_role: 'data_scientist',
    user_want: 'to access historical data for all previous video variant tests',
    user_benefit: 'I can identify patterns and improve future variant generation strategies',
    story_points: 5,
    priority: 'low',
    status: 'ready',
    sprint: 'Sprint 4',
    acceptance_criteria: [
      'Database stores all variant history',
      'Search and filter by date, platform, performance metrics',
      'Export historical data for analysis',
      'Trend analysis charts (e.g., winning patterns over time)',
      'Data retention policy (1 year minimum)'
    ],
    definition_of_done: [],
    technical_notes: 'Design historical data schema, implement archive service, create search UI',
    created_by: 'SYSTEM'
  },
  {
    id: randomUUID(),
    story_key: `${SD_ID}:US-010`,
    sd_id: SD_ID,
    prd_id: PRD_ID,
    title: 'Platform-Specific Optimization Recommendations',
    user_role: 'social_media_manager',
    user_want: 'AI to recommend platform-specific optimizations (e.g., "shorter videos for TikTok")',
    user_benefit: 'I learn how to improve content strategy for each platform',
    story_points: 8,
    priority: 'low',
    status: 'ready',
    sprint: 'Sprint 4',
    acceptance_criteria: [
      'AI analyzes performance differences across platforms',
      'Recommendations generated for each platform (format, length, style)',
      'A/B test suggestions based on historical data',
      'Actionable insights displayed in dashboard',
      'Feedback loop to refine recommendations over time'
    ],
    definition_of_done: [],
    technical_notes: 'Build recommendation ML model, integrate with performance data, create insights UI',
    created_by: 'SYSTEM'
  }
];

async function createUserStories() {
  console.log(`🎯 Creating User Stories for ${SD_ID}`);
  console.log('='.repeat(80));

  try {
    // Check if user stories already exist
    const { data: existing } = await supabase
      .from('user_stories')
      .select('story_key')
      .eq('sd_id', SD_ID);

    if (existing && existing.length > 0) {
      console.log(`\n⚠️  User stories already exist for ${SD_ID}`);
      console.log(`Found ${existing.length} existing stories. Delete them first if you want to recreate.\n`);
      return existing;
    }

    // Insert user stories
    const { data, error } = await supabase
      .from('user_stories')
      .insert(userStories)
      .select();

    if (error) throw error;

    console.log(`\n✅ Successfully created ${data.length} user stories!\n`);

    data.forEach((story, i) => {
      console.log(`${i + 1}. ${story.story_key}: ${story.title}`);
      console.log(`   Priority: ${story.priority} | Points: ${story.story_points} | Sprint: ${story.sprint}`);
    });

    console.log('\n' + '='.repeat(80));
    console.log(`Total Story Points: ${userStories.reduce((sum, s) => sum + s.story_points, 0)}`);
    console.log('='.repeat(80) + '\n');

    return data;
  } catch (error) {
    console.error('❌ Error creating user stories:', error.message);
    if (error.details) console.error('Details:', error.details);
    if (error.hint) console.error('Hint:', error.hint);
    process.exit(1);
  }
}

// Execute if run directly
if (import.meta.url === `file://${process.argv[1]}`) {
  createUserStories();
}

export { createUserStories };
