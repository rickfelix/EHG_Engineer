-- UAT Structured Reports Table
-- Stores comprehensive JSON reports generated by the UAT Report Generator
-- Complements the existing uat-tracking-schema.sql

-- =========================================
-- UAT Structured Reports
-- =========================================
CREATE TABLE IF NOT EXISTS uat_reports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    report_id VARCHAR(100) UNIQUE NOT NULL, -- UAT-YYYY-MM-DDTHH-mm-ss format
    run_id UUID REFERENCES uat_test_runs(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    version VARCHAR(20) DEFAULT '1.0.0',
    generator VARCHAR(100) DEFAULT 'UAT Report Generator',
    test_framework VARCHAR(50) DEFAULT 'Playwright',

    -- Executive Summary (JSON structure from report generator)
    executive_summary JSONB NOT NULL,

    -- Quality Gates Analysis
    quality_gates JSONB NOT NULL,

    -- Test Statistics
    test_statistics JSONB NOT NULL,

    -- Failure Analysis (categorized failures)
    failure_analysis JSONB NOT NULL,

    -- AI-Generated Recommendations
    recommendations JSONB NOT NULL DEFAULT '[]'::jsonb,

    -- Full Report Data (complete report structure)
    full_report JSONB NOT NULL,

    -- Report metadata
    total_tests INTEGER NOT NULL DEFAULT 0,
    passed_tests INTEGER NOT NULL DEFAULT 0,
    failed_tests INTEGER NOT NULL DEFAULT 0,
    flaky_tests INTEGER NOT NULL DEFAULT 0,
    pass_rate DECIMAL(5,2) NOT NULL DEFAULT 0.00,
    duration_ms INTEGER DEFAULT 0,

    -- Quality gate status
    overall_gate_status VARCHAR(20) NOT NULL, -- PASS, FAIL, WARNING
    critical_gate_failures INTEGER DEFAULT 0,
    gates_passed INTEGER DEFAULT 0,
    gates_total INTEGER DEFAULT 0,

    -- Issue tracking
    critical_issues INTEGER DEFAULT 0,
    high_issues INTEGER DEFAULT 0,
    medium_issues INTEGER DEFAULT 0,
    low_issues INTEGER DEFAULT 0,
    total_recommendations INTEGER DEFAULT 0,

    -- Storage paths
    report_file_path TEXT,
    summary_file_path TEXT,

    -- Audit fields
    created_at TIMESTAMPTZ DEFAULT NOW(),
    created_by VARCHAR(100) DEFAULT 'uat-report-generator',
    metadata JSONB DEFAULT '{}'::jsonb
);

-- =========================================
-- UAT Report Recommendations
-- =========================================
CREATE TABLE IF NOT EXISTS uat_report_recommendations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    report_id UUID REFERENCES uat_reports(id) ON DELETE CASCADE,
    priority VARCHAR(20) NOT NULL, -- CRITICAL, HIGH, MEDIUM, LOW
    category VARCHAR(100) NOT NULL, -- Authentication, UI Elements, Performance, etc
    issue VARCHAR(255) NOT NULL,
    action TEXT NOT NULL,
    impact TEXT,
    recommendation_order INTEGER DEFAULT 0,

    -- Implementation tracking
    is_implemented BOOLEAN DEFAULT FALSE,
    implemented_at TIMESTAMPTZ,
    implemented_by VARCHAR(100),
    implementation_notes TEXT,

    -- Related entities
    related_sd_id VARCHAR(50), -- Auto-generated Strategic Directive
    related_issue_ids UUID[], -- Related UAT issues

    created_at TIMESTAMPTZ DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- =========================================
-- UAT Quality Gates History
-- =========================================
CREATE TABLE IF NOT EXISTS uat_quality_gates_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    report_id UUID REFERENCES uat_reports(id) ON DELETE CASCADE,
    gate_name VARCHAR(100) NOT NULL,
    gate_type VARCHAR(50) NOT NULL, -- overall_pass_rate, authentication_failures, etc
    current_value DECIMAL(10,4) NOT NULL,
    target_value DECIMAL(10,4) NOT NULL,
    status VARCHAR(10) NOT NULL, -- PASS, FAIL
    is_critical BOOLEAN DEFAULT FALSE,
    variance_pct DECIMAL(10,4), -- Percentage difference from target

    -- Trend analysis
    previous_value DECIMAL(10,4),
    trend_direction VARCHAR(10), -- IMPROVING, DEGRADING, STABLE
    consecutive_failures INTEGER DEFAULT 0,

    created_at TIMESTAMPTZ DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- =========================================
-- Indexes for Performance
-- =========================================
CREATE INDEX idx_uat_reports_report_id ON uat_reports(report_id);
CREATE INDEX idx_uat_reports_run_id ON uat_reports(run_id);
CREATE INDEX idx_uat_reports_timestamp ON uat_reports(timestamp DESC);
CREATE INDEX idx_uat_reports_gate_status ON uat_reports(overall_gate_status);
CREATE INDEX idx_uat_reports_pass_rate ON uat_reports(pass_rate DESC);

CREATE INDEX idx_uat_recommendations_report_id ON uat_report_recommendations(report_id);
CREATE INDEX idx_uat_recommendations_priority ON uat_report_recommendations(priority);
CREATE INDEX idx_uat_recommendations_category ON uat_report_recommendations(category);
CREATE INDEX idx_uat_recommendations_implemented ON uat_report_recommendations(is_implemented);

CREATE INDEX idx_uat_quality_gates_report_id ON uat_quality_gates_history(report_id);
CREATE INDEX idx_uat_quality_gates_name ON uat_quality_gates_history(gate_name);
CREATE INDEX idx_uat_quality_gates_status ON uat_quality_gates_history(status);
CREATE INDEX idx_uat_quality_gates_critical ON uat_quality_gates_history(is_critical);

-- =========================================
-- Views for Reporting Analytics
-- =========================================

-- Latest quality gate trends
CREATE OR REPLACE VIEW uat_latest_quality_trends AS
SELECT DISTINCT ON (gate_name)
    gate_name,
    current_value,
    target_value,
    status,
    is_critical,
    trend_direction,
    consecutive_failures,
    created_at
FROM uat_quality_gates_history
ORDER BY gate_name, created_at DESC;

-- Report summary dashboard
CREATE OR REPLACE VIEW uat_report_dashboard AS
SELECT
    r.report_id,
    r.timestamp,
    r.pass_rate,
    r.overall_gate_status,
    r.total_tests,
    r.failed_tests,
    r.critical_issues + r.high_issues as urgent_issues,
    r.total_recommendations,
    tr.environment,
    tr.browser,
    ts.suite_name,
    COUNT(rec.id) as pending_recommendations
FROM uat_reports r
LEFT JOIN uat_test_runs tr ON r.run_id = tr.id
LEFT JOIN uat_test_suites ts ON tr.suite_id = ts.id
LEFT JOIN uat_report_recommendations rec ON r.id = rec.report_id AND rec.is_implemented = FALSE
GROUP BY r.id, tr.environment, tr.browser, ts.suite_name
ORDER BY r.timestamp DESC;

-- Quality gate failure patterns
CREATE OR REPLACE VIEW uat_quality_gate_failures AS
SELECT
    gate_name,
    COUNT(*) as total_failures,
    COUNT(CASE WHEN is_critical THEN 1 END) as critical_failures,
    AVG(variance_pct) as avg_variance_pct,
    MAX(consecutive_failures) as max_consecutive_failures,
    MIN(created_at) as first_failure,
    MAX(created_at) as latest_failure
FROM uat_quality_gates_history
WHERE status = 'FAIL'
GROUP BY gate_name
ORDER BY critical_failures DESC, total_failures DESC;

-- Recommendation implementation tracking
CREATE OR REPLACE VIEW uat_recommendation_metrics AS
SELECT
    category,
    priority,
    COUNT(*) as total_recommendations,
    COUNT(CASE WHEN is_implemented THEN 1 END) as implemented_count,
    ROUND(
        COUNT(CASE WHEN is_implemented THEN 1 END)::numeric /
        NULLIF(COUNT(*), 0) * 100, 2
    ) as implementation_rate_pct,
    AVG(EXTRACT(EPOCH FROM (implemented_at - created_at))/3600) as avg_implementation_hours
FROM uat_report_recommendations
GROUP BY category, priority
ORDER BY priority, implementation_rate_pct DESC;

-- =========================================
-- Functions for Report Management
-- =========================================

-- Function to store complete UAT report
CREATE OR REPLACE FUNCTION store_uat_report(
    p_report_id VARCHAR(100),
    p_run_id UUID,
    p_report_data JSONB
) RETURNS UUID AS $$
DECLARE
    report_uuid UUID;
    rec RECORD;
BEGIN
    -- Insert main report
    INSERT INTO uat_reports (
        report_id,
        run_id,
        timestamp,
        executive_summary,
        quality_gates,
        test_statistics,
        failure_analysis,
        recommendations,
        full_report,
        total_tests,
        passed_tests,
        failed_tests,
        flaky_tests,
        pass_rate,
        overall_gate_status,
        critical_gate_failures,
        gates_passed,
        gates_total,
        critical_issues,
        high_issues,
        total_recommendations
    ) VALUES (
        p_report_id,
        p_run_id,
        (p_report_data->>'timestamp')::timestamptz,
        p_report_data->'executive_summary',
        p_report_data->'quality_gates',
        p_report_data->'test_results',
        p_report_data->'failure_analysis',
        p_report_data->'recommendations',
        p_report_data,
        (p_report_data->'executive_summary'->'metrics'->>'total_tests')::integer,
        (p_report_data->'executive_summary'->'metrics'->>'passed')::integer,
        (p_report_data->'executive_summary'->'metrics'->>'failed')::integer,
        (p_report_data->'executive_summary'->'metrics'->>'flaky')::integer,
        (p_report_data->'executive_summary'->'metrics'->>'pass_rate')::decimal,
        p_report_data->'quality_gates'->>'overallGateStatus',
        (p_report_data->'quality_gates'->>'criticalGatesFailed')::integer,
        (p_report_data->'executive_summary'->'quality_gates'->>'gates_passed')::integer,
        (p_report_data->'executive_summary'->'quality_gates'->>'gates_total')::integer,
        (p_report_data->'executive_summary'->'issues'->>'critical')::integer,
        (p_report_data->'executive_summary'->'issues'->>'high')::integer,
        (p_report_data->'executive_summary'->'issues'->>'total_recommendations')::integer
    ) RETURNING id INTO report_uuid;

    -- Insert individual recommendations
    FOR rec IN SELECT * FROM jsonb_array_elements(p_report_data->'recommendations')
    LOOP
        INSERT INTO uat_report_recommendations (
            report_id,
            priority,
            category,
            issue,
            action,
            impact
        ) VALUES (
            report_uuid,
            rec.value->>'priority',
            rec.value->>'category',
            rec.value->>'issue',
            rec.value->>'action',
            rec.value->>'impact'
        );
    END LOOP;

    RETURN report_uuid;
END;
$$ LANGUAGE plpgsql;

-- Grant permissions
GRANT ALL ON uat_reports TO authenticated;
GRANT ALL ON uat_report_recommendations TO authenticated;
GRANT ALL ON uat_quality_gates_history TO authenticated;
GRANT EXECUTE ON FUNCTION store_uat_report TO authenticated;